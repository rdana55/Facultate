{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyPwDnFa0CEQOmz3zs4UVFPt"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","source":["from google.colab import files\n","import pandas as pd\n","\n","uploaded = files.upload()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":108},"id":"6XXH_6J5eXNW","executionInfo":{"status":"ok","timestamp":1715889443687,"user_tz":-180,"elapsed":21469,"user":{"displayName":"Dana Rusu","userId":"09652823823802193394"}},"outputId":"d2d5a729-7f9c-4d82-a5e3-cdfefea91973"},"execution_count":1,"outputs":[{"output_type":"display_data","data":{"text/plain":["<IPython.core.display.HTML object>"],"text/html":["\n","     <input type=\"file\" id=\"files-6adbee13-9b1d-4cec-90bb-5933b451fffa\" name=\"files[]\" multiple disabled\n","        style=\"border:none\" />\n","     <output id=\"result-6adbee13-9b1d-4cec-90bb-5933b451fffa\">\n","      Upload widget is only available when the cell has been executed in the\n","      current browser session. Please rerun this cell to enable.\n","      </output>\n","      <script>// Copyright 2017 Google LLC\n","//\n","// Licensed under the Apache License, Version 2.0 (the \"License\");\n","// you may not use this file except in compliance with the License.\n","// You may obtain a copy of the License at\n","//\n","//      http://www.apache.org/licenses/LICENSE-2.0\n","//\n","// Unless required by applicable law or agreed to in writing, software\n","// distributed under the License is distributed on an \"AS IS\" BASIS,\n","// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n","// See the License for the specific language governing permissions and\n","// limitations under the License.\n","\n","/**\n"," * @fileoverview Helpers for google.colab Python module.\n"," */\n","(function(scope) {\n","function span(text, styleAttributes = {}) {\n","  const element = document.createElement('span');\n","  element.textContent = text;\n","  for (const key of Object.keys(styleAttributes)) {\n","    element.style[key] = styleAttributes[key];\n","  }\n","  return element;\n","}\n","\n","// Max number of bytes which will be uploaded at a time.\n","const MAX_PAYLOAD_SIZE = 100 * 1024;\n","\n","function _uploadFiles(inputId, outputId) {\n","  const steps = uploadFilesStep(inputId, outputId);\n","  const outputElement = document.getElementById(outputId);\n","  // Cache steps on the outputElement to make it available for the next call\n","  // to uploadFilesContinue from Python.\n","  outputElement.steps = steps;\n","\n","  return _uploadFilesContinue(outputId);\n","}\n","\n","// This is roughly an async generator (not supported in the browser yet),\n","// where there are multiple asynchronous steps and the Python side is going\n","// to poll for completion of each step.\n","// This uses a Promise to block the python side on completion of each step,\n","// then passes the result of the previous step as the input to the next step.\n","function _uploadFilesContinue(outputId) {\n","  const outputElement = document.getElementById(outputId);\n","  const steps = outputElement.steps;\n","\n","  const next = steps.next(outputElement.lastPromiseValue);\n","  return Promise.resolve(next.value.promise).then((value) => {\n","    // Cache the last promise value to make it available to the next\n","    // step of the generator.\n","    outputElement.lastPromiseValue = value;\n","    return next.value.response;\n","  });\n","}\n","\n","/**\n"," * Generator function which is called between each async step of the upload\n"," * process.\n"," * @param {string} inputId Element ID of the input file picker element.\n"," * @param {string} outputId Element ID of the output display.\n"," * @return {!Iterable<!Object>} Iterable of next steps.\n"," */\n","function* uploadFilesStep(inputId, outputId) {\n","  const inputElement = document.getElementById(inputId);\n","  inputElement.disabled = false;\n","\n","  const outputElement = document.getElementById(outputId);\n","  outputElement.innerHTML = '';\n","\n","  const pickedPromise = new Promise((resolve) => {\n","    inputElement.addEventListener('change', (e) => {\n","      resolve(e.target.files);\n","    });\n","  });\n","\n","  const cancel = document.createElement('button');\n","  inputElement.parentElement.appendChild(cancel);\n","  cancel.textContent = 'Cancel upload';\n","  const cancelPromise = new Promise((resolve) => {\n","    cancel.onclick = () => {\n","      resolve(null);\n","    };\n","  });\n","\n","  // Wait for the user to pick the files.\n","  const files = yield {\n","    promise: Promise.race([pickedPromise, cancelPromise]),\n","    response: {\n","      action: 'starting',\n","    }\n","  };\n","\n","  cancel.remove();\n","\n","  // Disable the input element since further picks are not allowed.\n","  inputElement.disabled = true;\n","\n","  if (!files) {\n","    return {\n","      response: {\n","        action: 'complete',\n","      }\n","    };\n","  }\n","\n","  for (const file of files) {\n","    const li = document.createElement('li');\n","    li.append(span(file.name, {fontWeight: 'bold'}));\n","    li.append(span(\n","        `(${file.type || 'n/a'}) - ${file.size} bytes, ` +\n","        `last modified: ${\n","            file.lastModifiedDate ? file.lastModifiedDate.toLocaleDateString() :\n","                                    'n/a'} - `));\n","    const percent = span('0% done');\n","    li.appendChild(percent);\n","\n","    outputElement.appendChild(li);\n","\n","    const fileDataPromise = new Promise((resolve) => {\n","      const reader = new FileReader();\n","      reader.onload = (e) => {\n","        resolve(e.target.result);\n","      };\n","      reader.readAsArrayBuffer(file);\n","    });\n","    // Wait for the data to be ready.\n","    let fileData = yield {\n","      promise: fileDataPromise,\n","      response: {\n","        action: 'continue',\n","      }\n","    };\n","\n","    // Use a chunked sending to avoid message size limits. See b/62115660.\n","    let position = 0;\n","    do {\n","      const length = Math.min(fileData.byteLength - position, MAX_PAYLOAD_SIZE);\n","      const chunk = new Uint8Array(fileData, position, length);\n","      position += length;\n","\n","      const base64 = btoa(String.fromCharCode.apply(null, chunk));\n","      yield {\n","        response: {\n","          action: 'append',\n","          file: file.name,\n","          data: base64,\n","        },\n","      };\n","\n","      let percentDone = fileData.byteLength === 0 ?\n","          100 :\n","          Math.round((position / fileData.byteLength) * 100);\n","      percent.textContent = `${percentDone}% done`;\n","\n","    } while (position < fileData.byteLength);\n","  }\n","\n","  // All done.\n","  yield {\n","    response: {\n","      action: 'complete',\n","    }\n","  };\n","}\n","\n","scope.google = scope.google || {};\n","scope.google.colab = scope.google.colab || {};\n","scope.google.colab._files = {\n","  _uploadFiles,\n","  _uploadFilesContinue,\n","};\n","})(self);\n","</script> "]},"metadata":{}},{"output_type":"stream","name":"stdout","text":["Saving reviews_mixed.csv to reviews_mixed.csv\n","Saving spam.csv to spam.csv\n"]}]},{"cell_type":"markdown","source":["# 1"],"metadata":{"id":"doRaku-mciXW"}},{"cell_type":"markdown","source":["bag of words"],"metadata":{"id":"hxsDEFy8Z6Xs"}},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Zc4z8Gfyb4sq","executionInfo":{"status":"ok","timestamp":1715695219690,"user_tz":-180,"elapsed":820,"user":{"displayName":"Dana Rusu","userId":"09652823823802193394"}},"outputId":"84e70569-e25c-4578-fc72-09212895c8f8"},"outputs":[{"output_type":"stream","name":"stdout","text":["['Go until jurong point, crazy.. Available only in bugis n great world la e buffet... Cine there got amore wat...', 'Ok lar... Joking wif u oni...']\n","['ham', 'spam']\n","['Today is \\\\song dedicated day..\\\\\" Which song will u dedicate for me? Send this to all ur valuable frnds but first rply me...\"', 'K tell me anything about you.', \"Didn't you get hep b immunisation in nigeria.\"]\n","vocab size:  604  words\n","traindata size:  80  emails\n","trainFeatures shape:  (80, 604)\n","some words of the vocab:  ['world' 'worried' 'wun' 'www' 'xuhui' 'xx' 'xxx' 'yeah' 'year' 'yes'\n"," 'yesterday' 'yo' 'you' 'your' 'yours' 'yourself' 'yummy' 'yup' 'ì_' 'ì¼1']\n","some features:  [[0 0 0 ... 0 0 0]\n"," [0 0 0 ... 0 0 0]\n"," [0 0 0 ... 0 0 0]]\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/sklearn/cluster/_kmeans.py:870: FutureWarning: The default value of `n_init` will change from 10 to 'auto' in 1.4. Set the value of `n_init` explicitly to suppress the warning\n","  warnings.warn(\n"]},{"output_type":"stream","name":"stdout","text":["As per your request 'Melle Melle (Oru Minnaminunginte Nurungu Vettam)' has been set as your callertune for all Callers. Press *9 to copy your friends Callertune  ->  spam\n","WINNER!! As a valued network customer you have been selected to receivea å£900 prize reward! To claim call 09061701461. Claim code KL341. Valid 12 hours only.  ->  spam\n","XXXMobileMovieClub: To use your credit, click the WAP link in the next txt message or click here>> http://wap. xxxmobilemovieclub.com?n=QJKGIGHJJGCBL  ->  ham\n","Oh k...i'm watching here:)  ->  ham\n","Did you catch the bus ? Are you frying an egg ? Did you make a tea? Are you eating your mom's left over dinner ? Do you feel my Love ?  ->  ham\n","Wait that's still not all that clear, were you not sure about me being sarcastic or that that's why x doesn't want to live with us  ->  spam\n","Great! I hope you like your man well endowed. I am  &lt;#&gt;  inches...  ->  ham\n","Wow. I never realized that you were so embarassed by your accomodations. I thought you liked it, since i was doing the best i could and you always seemed so happy about \\the cave\\\". I'm sorry I didn't and don't have more to give. I'm sorry i offered. I'm sorry your room was so embarassing.\"  ->  spam\n","Ha ha ha good joke. Girls are situation seekers.  ->  ham\n","Its a part of checking IQ  ->  ham\n","As a valued customer, I am pleased to advise you that following recent review of your Mob No. you are awarded with a å£1500 Bonus Prize, call 09066364589  ->  spam\n","K..k:)where are you?how did you performed?  ->  ham\n","I am waiting machan. Call me once you free.  ->  ham\n","Thats cool. i am a gentleman and will treat you with dignity and respect.  ->  ham\n","I like you peoples very much:) but am very shy pa.  ->  ham\n","Does not operate after  &lt;#&gt;  or what  ->  ham\n","Sorry, I'll call later  ->  ham\n","Yeah do! DonÛ÷t stand to close tho- youÛ÷ll catch something!  ->  ham\n","Smile in Pleasure Smile in Pain Smile when trouble pours like Rain Smile when sum1 Hurts U Smile becoz SOMEONE still Loves to see u Smiling!!  ->  ham\n","Please don't text me anymore. I have nothing else to say.  ->  ham\n","acc:  0.8\n"]}],"source":["import csv\n","import os\n","\n","# Get the current directory and file path\n","crtDir = os.getcwd()\n","fileName = os.path.join(crtDir, 'spam.csv')\n","\n","data = []\n","\n","# Open the CSV file with a specific encoding\n","with open(fileName, encoding='latin1') as csv_file:\n","    csv_reader = csv.reader(csv_file, delimiter=',')\n","    line_count = 0\n","    for row in csv_reader:\n","        if line_count == 0:\n","            dataNames = row\n","        else:\n","            data.append(row)\n","        line_count += 1\n","\n","# Extract inputs and outputs\n","inputs = [data[i][0] for i in range(len(data))][:100]\n","outputs = [data[i][1] for i in range(len(data))][:100]\n","labelNames = list(set(outputs))\n","\n","print(inputs[:2])\n","print(labelNames[:2])\n","\n","# Prepare data for training and testing\n","import numpy as np\n","\n","np.random.seed(5)\n","noSamples = len(inputs)\n","indexes = [i for i in range(noSamples)]\n","trainSample = np.random.choice(indexes, int(0.8 * noSamples), replace=False)\n","testSample = [i for i in indexes if not i in trainSample]\n","\n","trainInputs = [inputs[i] for i in trainSample]\n","trainOutputs = [outputs[i] for i in trainSample]\n","testInputs = [inputs[i] for i in testSample]\n","testOutputs = [outputs[i] for i in testSample]\n","\n","print(trainInputs[:3])\n","\n","# Extract some features from the raw text\n","# Representation 1: Bag of Words\n","from sklearn.feature_extraction.text import CountVectorizer\n","vectorizer = CountVectorizer()\n","\n","trainFeatures = vectorizer.fit_transform(trainInputs)\n","testFeatures = vectorizer.transform(testInputs)\n","\n","# Vocabulary size\n","print(\"vocab size: \", len(vectorizer.vocabulary_), \" words\")\n","# Number of emails (samples)\n","print(\"traindata size: \", len(trainInputs), \" emails\")\n","# Shape of feature matrix\n","print(\"trainFeatures shape: \", trainFeatures.shape)\n","\n","# Vocabulary from the train data\n","print('some words of the vocab: ', vectorizer.get_feature_names_out()[-20:])\n","# Extracted features\n","print('some features: ', trainFeatures.toarray()[:3])\n","\n","# unsupervised classification ( = clustering) of data\n","\n","from sklearn.cluster import KMeans\n","\n","unsupervisedClassifier = KMeans(n_clusters=2, random_state=0)\n","unsupervisedClassifier.fit(trainFeatures)\n","\n","computedTestIndexes = unsupervisedClassifier.predict(testFeatures)\n","computedTestOutputs = [labelNames[value] for value in computedTestIndexes]\n","for i in range(0, len(testInputs)):\n","    print(testInputs[i], \" -> \", computedTestOutputs[i])\n","\n","\n","from sklearn.metrics import accuracy_score\n","\n","# just supposing that we have the true labels\n","print(\"acc: \", accuracy_score(testOutputs, computedTestOutputs))"]},{"cell_type":"markdown","source":["sentimente"],"metadata":{"id":"ZEE7lYhLZ-B-"}},{"cell_type":"code","source":["pip install pandas"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"S60bRzgVaP68","executionInfo":{"status":"ok","timestamp":1715695332935,"user_tz":-180,"elapsed":8214,"user":{"displayName":"Dana Rusu","userId":"09652823823802193394"}},"outputId":"05f69b80-8ba5-4e03-e392-860ef337f756"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Requirement already satisfied: pandas in /usr/local/lib/python3.10/dist-packages (2.0.3)\n","Requirement already satisfied: python-dateutil>=2.8.2 in /usr/local/lib/python3.10/dist-packages (from pandas) (2.8.2)\n","Requirement already satisfied: pytz>=2020.1 in /usr/local/lib/python3.10/dist-packages (from pandas) (2023.4)\n","Requirement already satisfied: tzdata>=2022.1 in /usr/local/lib/python3.10/dist-packages (from pandas) (2024.1)\n","Requirement already satisfied: numpy>=1.21.0 in /usr/local/lib/python3.10/dist-packages (from pandas) (1.25.2)\n","Requirement already satisfied: six>=1.5 in /usr/local/lib/python3.10/dist-packages (from python-dateutil>=2.8.2->pandas) (1.16.0)\n"]}]},{"cell_type":"code","source":["import csv\n","import os\n","import numpy as np\n","import nltk\n","from nltk.sentiment import SentimentIntensityAnalyzer\n","from nltk.tokenize import word_tokenize, sent_tokenize\n","from nltk.corpus import stopwords\n","from sklearn.preprocessing import StandardScaler\n","from sklearn.cluster import KMeans\n","from sklearn.metrics import accuracy_score\n","\n","nltk.download('vader_lexicon')\n","nltk.download('punkt')\n","nltk.download('stopwords')\n","\n","# Get the current directory and file path\n","crtDir = os.getcwd()\n","fileName = os.path.join(crtDir, 'reviews_mixed.csv')\n","\n","data = []\n","\n","# Open the CSV file with a specific encoding\n","with open(fileName, encoding='latin1') as csv_file:\n","    csv_reader = csv.reader(csv_file, delimiter=',')\n","    line_count = 0\n","    for row in csv_reader:\n","        if line_count == 0:\n","            dataNames = row\n","        else:\n","            data.append(row)\n","        line_count += 1\n","\n","# Extract inputs and outputs\n","inputs = [data[i][0] for i in range(len(data))][:100]\n","outputs = [data[i][1] for i in range(len(data))][:100]\n","labelNames = list(set(outputs))\n","\n","print(inputs[:2])\n","print(labelNames[:2])\n","\n","# Prepare data for training and testing\n","np.random.seed(5)\n","noSamples = len(inputs)\n","indexes = [i for i in range(noSamples)]\n","trainSample = np.random.choice(indexes, int(0.8 * noSamples), replace=False)\n","testSample = [i for i in indexes if not i in trainSample]\n","\n","trainInputs = [inputs[i] for i in trainSample]\n","trainOutputs = [outputs[i] for i in trainSample]\n","testInputs = [inputs[i] for i in testSample]\n","testOutputs = [outputs[i] for i in testSample]\n","\n","print(trainInputs[:3])\n","\n","# Sentiment Analysis\n","sia = SentimentIntensityAnalyzer()\n","\n","def get_sentiment_features(texts):\n","    sentiment_scores = []\n","    for text in texts:\n","        scores = sia.polarity_scores(text)\n","        sentiment_scores.append([scores['neg'], scores['neu'], scores['pos'], scores['compound']])\n","    return np.array(sentiment_scores)\n","\n","# Stylistic Features\n","def get_stylistic_features(texts):\n","    stylistic_features = []\n","    for text in texts:\n","        words = word_tokenize(text)\n","        sentences = sent_tokenize(text)\n","        num_words = len(words)\n","        num_sentences = len(sentences)\n","        num_characters = sum(len(word) for word in words)\n","        avg_word_length = num_characters / num_words if num_words > 0 else 0\n","        num_stopwords = sum(1 for word in words if word in stopwords.words('english'))\n","        stylistic_features.append([num_words, num_sentences, avg_word_length, num_stopwords])\n","    return np.array(stylistic_features)\n","\n","trainSentimentFeatures = get_sentiment_features(trainInputs)\n","testSentimentFeatures = get_sentiment_features(testInputs)\n","\n","trainStylisticFeatures = get_stylistic_features(trainInputs)\n","testStylisticFeatures = get_stylistic_features(testInputs)\n","\n","# Combining Sentiment and Stylistic features\n","trainFeaturesCombined = np.hstack([trainSentimentFeatures, trainStylisticFeatures])\n","testFeaturesCombined = np.hstack([testSentimentFeatures, testStylisticFeatures])\n","\n","# Normalize features\n","scaler = StandardScaler()\n","trainFeaturesCombined = scaler.fit_transform(trainFeaturesCombined)\n","testFeaturesCombined = scaler.transform(testFeaturesCombined)\n","\n","# Unsupervised classification ( = clustering) of data\n","unsupervisedClassifier = KMeans(n_clusters=2, random_state=0)\n","unsupervisedClassifier.fit(trainFeaturesCombined)\n","\n","computedTestIndexes = unsupervisedClassifier.predict(testFeaturesCombined)\n","\n","# Mapping predicted cluster indexes to 'positive' or 'negative'\n","cluster_labels = ['negative', 'positive'] if unsupervisedClassifier.cluster_centers_[0].mean() < unsupervisedClassifier.cluster_centers_[1].mean() else ['positive', 'negative']\n","computedTestOutputs = [cluster_labels[index] for index in computedTestIndexes]\n","\n","for i in range(0, len(testInputs)):\n","    print(testInputs[i], \" -> \", computedTestOutputs[i])\n","\n","# Just supposing that we have the true labels\n","print(\"acc: \", accuracy_score(testOutputs, computedTestOutputs))\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"8Qz-aVCdZ5F5","executionInfo":{"status":"ok","timestamp":1715697454199,"user_tz":-180,"elapsed":2228,"user":{"displayName":"Dana Rusu","userId":"09652823823802193394"}},"outputId":"d8751b65-1281-4708-b75d-720b0ad739c7"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stderr","text":["[nltk_data] Downloading package vader_lexicon to /root/nltk_data...\n","[nltk_data]   Package vader_lexicon is already up-to-date!\n","[nltk_data] Downloading package punkt to /root/nltk_data...\n","[nltk_data]   Unzipping tokenizers/punkt.zip.\n","[nltk_data] Downloading package stopwords to /root/nltk_data...\n","[nltk_data]   Unzipping corpora/stopwords.zip.\n"]},{"output_type":"stream","name":"stdout","text":["['The rooms are extremely small, practically only a bed.', 'Room safe did not work.']\n","['negative', 'positive']\n","['Just to give you an idea: the shutters of the windows were not working, did not go neither up or down - just hanging down only one side and the other up....', 'and hip and CLEAN!', \"Toilet paper wasn't replaced everyday!\"]\n","The bed is very comfortable.  ->  positive\n","Very spacious rooms, quiet and very comfortable.  ->  positive\n","Corridors filthy\n","Room filthy\n","Electrical cables in room not safe\n","Whole building smelly\n","Shower repulsive  ->  negative\n","walls seem to have no sound insulation  ->  negative\n","The building was under renovation,  ->  negative\n","no elevator might be a challenge for some people  ->  negative\n","The bed was highly uncomfortable, although the engineer fixed it  ->  negative\n","bed, smell.  ->  negative\n","Detest the glass \"door\" if shower/tub .. with?  ->  negative\n","this was expected, clean towels and room cleaned every day.  ->  positive\n","More plug outlets with surge protectors.  ->  negative\n","Room was very spacious  ->  negative\n","Roof terrace great  ->  positive\n","No tea or coffee making facilities in the rooms  ->  negative\n","the room had aircon and we had earplugs and slept soundly.  ->  negative\n","Also, when the bright bathroom lights are turned on, it lights up the whole hotel room, shining thru the frosted glass panels.  ->  negative\n","Bathroom was extra small,  ->  negative\n","Wifi connected  ->  negative\n","Windows haven't been cleaned for years (if ever).  ->  negative\n","No wardrobe, no space for luggage, no towel change, walls are not sound proof thus very noisy.  ->  negative\n","acc:  0.8\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/sklearn/cluster/_kmeans.py:870: FutureWarning: The default value of `n_init` will change from 10 to 'auto' in 1.4. Set the value of `n_init` explicitly to suppress the warning\n","  warnings.warn(\n"]}]},{"cell_type":"markdown","source":["# 2"],"metadata":{"id":"lPupT5pwckPA"}},{"cell_type":"code","source":["import csv\n","import os\n","import numpy as np\n","from sklearn.feature_extraction.text import CountVectorizer\n","from sklearn.cluster import KMeans\n","from sklearn.metrics import accuracy_score\n","import nltk\n","from nltk.sentiment import SentimentIntensityAnalyzer\n","\n","nltk.download('vader_lexicon')\n","\n","# Get the current directory and file path\n","crtDir = os.getcwd()\n","fileName = os.path.join(crtDir, 'reviews_mixed.csv')\n","\n","data = []\n","\n","# Open the CSV file with a specific encoding\n","with open(fileName, encoding='latin1') as csv_file:\n","    csv_reader = csv.reader(csv_file, delimiter=',')\n","    line_count = 0\n","    for row in csv_reader:\n","        if line_count == 0:\n","            dataNames = row\n","        else:\n","            data.append(row)\n","        line_count += 1\n","\n","# Extract inputs and outputs\n","inputs = [data[i][0] for i in range(len(data))][:100]\n","outputs = [data[i][1] for i in range(len(data))][:100]\n","labelNames = list(set(outputs))\n","\n","print(inputs[:2])\n","print(labelNames[:2])\n","\n","# Prepare data for training and testing\n","np.random.seed(5)\n","noSamples = len(inputs)\n","indexes = [i for i in range(noSamples)]\n","trainSample = np.random.choice(indexes, int(0.8 * noSamples), replace=False)\n","testSample = [i for i in indexes if not i in trainSample]\n","\n","trainInputs = [inputs[i] for i in trainSample]\n","trainOutputs = [outputs[i] for i in trainSample]\n","testInputs = [inputs[i] for i in testSample]\n","testOutputs = [outputs[i] for i in testSample]\n","\n","print(trainInputs[:3])\n","\n","# Extract some features from the raw text\n","# Representation 1: Bag of Words\n","vectorizer = CountVectorizer()\n","\n","trainFeatures = vectorizer.fit_transform(trainInputs)\n","testFeatures = vectorizer.transform(testInputs)\n","\n","# Vocabulary size\n","print(\"vocab size: \", len(vectorizer.vocabulary_), \" words\")\n","# Number of emails (samples)\n","print(\"traindata size: \", len(trainInputs), \" emails\")\n","# Shape of feature matrix\n","print(\"trainFeatures shape: \", trainFeatures.shape)\n","\n","# Vocabulary from the train data\n","print('some words of the vocab: ', vectorizer.get_feature_names_out()[-20:])\n","# Extracted features\n","print('some features: ', trainFeatures.toarray()[:3])\n","\n","# Sentiment Analysis\n","sia = SentimentIntensityAnalyzer()\n","\n","def get_sentiment_features(texts):\n","    sentiment_scores = []\n","    for text in texts:\n","        scores = sia.polarity_scores(text)\n","        sentiment_scores.append([scores['neg'], scores['neu'], scores['pos'], scores['compound']])\n","    return np.array(sentiment_scores)\n","\n","trainSentimentFeatures = get_sentiment_features(trainInputs)\n","testSentimentFeatures = get_sentiment_features(testInputs)\n","\n","# Combining Bag of Words features with Sentiment features\n","trainFeaturesCombined = np.hstack([trainFeatures.toarray(), trainSentimentFeatures])\n","testFeaturesCombined = np.hstack([testFeatures.toarray(), testSentimentFeatures])\n","\n","# Unsupervised classification ( = clustering) of data\n","unsupervisedClassifier = KMeans(n_clusters=2, random_state=0)\n","unsupervisedClassifier.fit(trainFeaturesCombined)\n","\n","computedTrainIndexes = unsupervisedClassifier.predict(trainFeaturesCombined)\n","computedTestIndexes = unsupervisedClassifier.predict(testFeaturesCombined)\n","\n","# Mapping predicted cluster indexes to 'positive' or 'negative'\n","cluster_labels = ['negative', 'positive'] if unsupervisedClassifier.cluster_centers_[0].mean() < unsupervisedClassifier.cluster_centers_[1].mean() else ['positive', 'negative']\n","computedTestOutputs = [cluster_labels[index] for index in computedTestIndexes]\n","\n","for i in range(0, len(testInputs)):\n","    print(testInputs[i], \" -> \", computedTestOutputs[i])\n","\n","# Just supposing that we have the true labels\n","print(\"acc: \", accuracy_score(testOutputs, computedTestOutputs))\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"HPAbGL3YcleU","executionInfo":{"status":"ok","timestamp":1715697144929,"user_tz":-180,"elapsed":689,"user":{"displayName":"Dana Rusu","userId":"09652823823802193394"}},"outputId":"2999b40e-8c5d-4f1d-b49f-8fde0ab0d87d"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stderr","text":["[nltk_data] Downloading package vader_lexicon to /root/nltk_data...\n","[nltk_data]   Package vader_lexicon is already up-to-date!\n","/usr/local/lib/python3.10/dist-packages/sklearn/cluster/_kmeans.py:870: FutureWarning: The default value of `n_init` will change from 10 to 'auto' in 1.4. Set the value of `n_init` explicitly to suppress the warning\n","  warnings.warn(\n"]},{"output_type":"stream","name":"stdout","text":["['The rooms are extremely small, practically only a bed.', 'Room safe did not work.']\n","['negative', 'positive']\n","['Just to give you an idea: the shutters of the windows were not working, did not go neither up or down - just hanging down only one side and the other up....', 'and hip and CLEAN!', \"Toilet paper wasn't replaced everyday!\"]\n","vocab size:  341  words\n","traindata size:  80  emails\n","trainFeatures shape:  (80, 341)\n","some words of the vocab:  ['was' 'wasn' 'water' 'we' 'wear' 'well' 'were' 'wet' 'which' 'whole'\n"," 'window' 'windows' 'winter' 'with' 'work' 'working' 'workout' 'would'\n"," 'you' 'your']\n","some features:  [[0 0 0 ... 0 1 0]\n"," [0 0 0 ... 0 0 0]\n"," [0 0 0 ... 0 0 0]]\n","The bed is very comfortable.  ->  negative\n","Very spacious rooms, quiet and very comfortable.  ->  negative\n","Corridors filthy\n","Room filthy\n","Electrical cables in room not safe\n","Whole building smelly\n","Shower repulsive  ->  negative\n","walls seem to have no sound insulation  ->  negative\n","The building was under renovation,  ->  negative\n","no elevator might be a challenge for some people  ->  negative\n","The bed was highly uncomfortable, although the engineer fixed it  ->  positive\n","bed, smell.  ->  negative\n","Detest the glass \"door\" if shower/tub .. with?  ->  negative\n","this was expected, clean towels and room cleaned every day.  ->  negative\n","More plug outlets with surge protectors.  ->  negative\n","Room was very spacious  ->  negative\n","Roof terrace great  ->  negative\n","No tea or coffee making facilities in the rooms  ->  negative\n","the room had aircon and we had earplugs and slept soundly.  ->  negative\n","Also, when the bright bathroom lights are turned on, it lights up the whole hotel room, shining thru the frosted glass panels.  ->  positive\n","Bathroom was extra small,  ->  negative\n","Wifi connected  ->  negative\n","Windows haven't been cleaned for years (if ever).  ->  negative\n","No wardrobe, no space for luggage, no towel change, walls are not sound proof thus very noisy.  ->  negative\n","acc:  0.6\n"]}]},{"cell_type":"markdown","source":["azure"],"metadata":{"id":"bl6zJFb6ltwt"}},{"cell_type":"code","source":["!pip install azure-cognitiveservices-vision-computervision"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":444},"id":"87nYloBSnsmT","executionInfo":{"status":"ok","timestamp":1715698857941,"user_tz":-180,"elapsed":9740,"user":{"displayName":"Dana Rusu","userId":"09652823823802193394"}},"outputId":"ddc2abf4-b4d5-47d8-83f6-e41fe7f0a6de"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Collecting azure-cognitiveservices-vision-computervision\n","  Downloading azure_cognitiveservices_vision_computervision-0.9.0-py2.py3-none-any.whl (39 kB)\n","Requirement already satisfied: msrest>=0.5.0 in /usr/local/lib/python3.10/dist-packages (from azure-cognitiveservices-vision-computervision) (0.7.1)\n","Requirement already satisfied: azure-common~=1.1 in /usr/local/lib/python3.10/dist-packages (from azure-cognitiveservices-vision-computervision) (1.1.28)\n","Requirement already satisfied: azure-core>=1.24.0 in /usr/local/lib/python3.10/dist-packages (from msrest>=0.5.0->azure-cognitiveservices-vision-computervision) (1.30.1)\n","Requirement already satisfied: certifi>=2017.4.17 in /usr/local/lib/python3.10/dist-packages (from msrest>=0.5.0->azure-cognitiveservices-vision-computervision) (2024.2.2)\n","Requirement already satisfied: isodate>=0.6.0 in /usr/local/lib/python3.10/dist-packages (from msrest>=0.5.0->azure-cognitiveservices-vision-computervision) (0.6.1)\n","Requirement already satisfied: requests-oauthlib>=0.5.0 in /usr/local/lib/python3.10/dist-packages (from msrest>=0.5.0->azure-cognitiveservices-vision-computervision) (1.3.1)\n","Requirement already satisfied: requests~=2.16 in /usr/local/lib/python3.10/dist-packages (from msrest>=0.5.0->azure-cognitiveservices-vision-computervision) (2.31.0)\n","Requirement already satisfied: six>=1.11.0 in /usr/local/lib/python3.10/dist-packages (from azure-core>=1.24.0->msrest>=0.5.0->azure-cognitiveservices-vision-computervision) (1.16.0)\n","Requirement already satisfied: typing-extensions>=4.6.0 in /usr/local/lib/python3.10/dist-packages (from azure-core>=1.24.0->msrest>=0.5.0->azure-cognitiveservices-vision-computervision) (4.11.0)\n","Requirement already satisfied: charset-normalizer<4,>=2 in /usr/local/lib/python3.10/dist-packages (from requests~=2.16->msrest>=0.5.0->azure-cognitiveservices-vision-computervision) (3.3.2)\n","Requirement already satisfied: idna<4,>=2.5 in /usr/local/lib/python3.10/dist-packages (from requests~=2.16->msrest>=0.5.0->azure-cognitiveservices-vision-computervision) (3.7)\n","Requirement already satisfied: urllib3<3,>=1.21.1 in /usr/local/lib/python3.10/dist-packages (from requests~=2.16->msrest>=0.5.0->azure-cognitiveservices-vision-computervision) (2.0.7)\n","Requirement already satisfied: oauthlib>=3.0.0 in /usr/local/lib/python3.10/dist-packages (from requests-oauthlib>=0.5.0->msrest>=0.5.0->azure-cognitiveservices-vision-computervision) (3.2.2)\n","Installing collected packages: azure-cognitiveservices-vision-computervision\n","Successfully installed azure-cognitiveservices-vision-computervision-0.9.0\n"]},{"output_type":"display_data","data":{"application/vnd.colab-display-data+json":{"pip_warning":{"packages":["azure"]},"id":"ea9d64b1f4de48c9813f431c36cd8bfa"}},"metadata":{}}]},{"cell_type":"code","source":["pip install azure-ai-textanalytics==5.2.0"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"yQpsocYMlu0X","executionInfo":{"status":"ok","timestamp":1715698508468,"user_tz":-180,"elapsed":8184,"user":{"displayName":"Dana Rusu","userId":"09652823823802193394"}},"outputId":"e60c0dd1-2e2c-4625-d79a-7fb5767107bd"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Collecting azure-ai-textanalytics==5.2.0\n","  Downloading azure_ai_textanalytics-5.2.0-py3-none-any.whl (239 kB)\n","\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m239.3/239.3 kB\u001b[0m \u001b[31m4.6 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hCollecting azure-core<2.0.0,>=1.24.0 (from azure-ai-textanalytics==5.2.0)\n","  Downloading azure_core-1.30.1-py3-none-any.whl (193 kB)\n","\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m193.4/193.4 kB\u001b[0m \u001b[31m8.4 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hCollecting msrest>=0.7.0 (from azure-ai-textanalytics==5.2.0)\n","  Downloading msrest-0.7.1-py3-none-any.whl (85 kB)\n","\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m85.4/85.4 kB\u001b[0m \u001b[31m7.3 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hCollecting azure-common~=1.1 (from azure-ai-textanalytics==5.2.0)\n","  Downloading azure_common-1.1.28-py2.py3-none-any.whl (14 kB)\n","Requirement already satisfied: typing-extensions>=4.0.1 in /usr/local/lib/python3.10/dist-packages (from azure-ai-textanalytics==5.2.0) (4.11.0)\n","Requirement already satisfied: requests>=2.21.0 in /usr/local/lib/python3.10/dist-packages (from azure-core<2.0.0,>=1.24.0->azure-ai-textanalytics==5.2.0) (2.31.0)\n","Requirement already satisfied: six>=1.11.0 in /usr/local/lib/python3.10/dist-packages (from azure-core<2.0.0,>=1.24.0->azure-ai-textanalytics==5.2.0) (1.16.0)\n","Requirement already satisfied: certifi>=2017.4.17 in /usr/local/lib/python3.10/dist-packages (from msrest>=0.7.0->azure-ai-textanalytics==5.2.0) (2024.2.2)\n","Collecting isodate>=0.6.0 (from msrest>=0.7.0->azure-ai-textanalytics==5.2.0)\n","  Downloading isodate-0.6.1-py2.py3-none-any.whl (41 kB)\n","\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m41.7/41.7 kB\u001b[0m \u001b[31m4.5 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hRequirement already satisfied: requests-oauthlib>=0.5.0 in /usr/local/lib/python3.10/dist-packages (from msrest>=0.7.0->azure-ai-textanalytics==5.2.0) (1.3.1)\n","Requirement already satisfied: charset-normalizer<4,>=2 in /usr/local/lib/python3.10/dist-packages (from requests>=2.21.0->azure-core<2.0.0,>=1.24.0->azure-ai-textanalytics==5.2.0) (3.3.2)\n","Requirement already satisfied: idna<4,>=2.5 in /usr/local/lib/python3.10/dist-packages (from requests>=2.21.0->azure-core<2.0.0,>=1.24.0->azure-ai-textanalytics==5.2.0) (3.7)\n","Requirement already satisfied: urllib3<3,>=1.21.1 in /usr/local/lib/python3.10/dist-packages (from requests>=2.21.0->azure-core<2.0.0,>=1.24.0->azure-ai-textanalytics==5.2.0) (2.0.7)\n","Requirement already satisfied: oauthlib>=3.0.0 in /usr/local/lib/python3.10/dist-packages (from requests-oauthlib>=0.5.0->msrest>=0.7.0->azure-ai-textanalytics==5.2.0) (3.2.2)\n","Installing collected packages: azure-common, isodate, azure-core, msrest, azure-ai-textanalytics\n","Successfully installed azure-ai-textanalytics-5.2.0 azure-common-1.1.28 azure-core-1.30.1 isodate-0.6.1 msrest-0.7.1\n"]}]},{"cell_type":"code","source":["import os\n","\n","os.environ[\"LANGUAGE_KEY\"] = \"cdf42aded690417b83e56200c9b5dd4b\"\n","os.environ[\"LANGUAGE_ENDPOINT\"] = \"https://danarusu9.cognitiveservices.azure.com/\"\n"],"metadata":{"id":"cVdr8Tatrb3N"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# [START analyze_sentiment]\n","import os\n","from azure.core.credentials import AzureKeyCredential\n","from azure.ai.textanalytics import TextAnalyticsClient\n","\n","\n","endpoint = os.environ[\"LANGUAGE_ENDPOINT\"]\n","key = os.environ[\"LANGUAGE_KEY\"]\n","\n","client = TextAnalyticsClient(endpoint=endpoint, credential=AzureKeyCredential(key))\n","\n","documents = [\n","    \"By choosing a bike over a car, I’m reducing my environmental footprint. Cycling promotes eco-friendly transportation, and I’m proud to be part of that movement..\"\n","]\n","\n","result = client.analyze_sentiment(documents, show_opinion_mining=True)\n","docs = [doc for doc in result if not doc.is_error]\n","\n","print(\"Let's visualize the sentiment of each of these documents\")\n","for idx, doc in enumerate(docs):\n","    print(f\"Document text: {documents[idx]}\")\n","    print(f\"Overall sentiment: {doc.sentiment}\")"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"ZiiU4P3ylzIl","executionInfo":{"status":"ok","timestamp":1715699976275,"user_tz":-180,"elapsed":1239,"user":{"displayName":"Dana Rusu","userId":"09652823823802193394"}},"outputId":"c88b8872-48a5-4fea-c139-608dc420e8e1"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Let's visualize the sentiment of each of these documents\n","Document text: By choosing a bike over a car, I’m reducing my environmental footprint. Cycling promotes eco-friendly transportation, and I’m proud to be part of that movement..\n","Overall sentiment: positive\n"]}]},{"cell_type":"markdown","source":["# OPTIONALE"],"metadata":{"id":"PPehFkpKtdBl"}},{"cell_type":"code","source":["import numpy as np\n","import pandas as pd\n","import matplotlib.pyplot as plt\n","from sklearn.feature_extraction.text import TfidfVectorizer\n","from sklearn.decomposition import PCA\n","\n","class KMeans:\n","    def __init__(self, n_clusters, max_iter=300):\n","        self.n_clusters = n_clusters\n","        self.max_iter = max_iter\n","\n","    def fit(self, X):\n","        np.random.seed(42)\n","        self.centroids = X[np.random.choice(X.shape[0], self.n_clusters, replace=False)]\n","\n","        for _ in range(self.max_iter):\n","            labels = self._assign_clusters(X)\n","            new_centroids = np.array([X[labels == i].mean(axis=0) for i in range(self.n_clusters)])\n","            if np.all(self.centroids == new_centroids):\n","                break\n","            self.centroids = new_centroids\n","\n","        self.labels_ = self._assign_clusters(X)\n","\n","    def _assign_clusters(self, X):\n","        distances = np.sqrt(((X - self.centroids[:, np.newaxis])**2).sum(axis=2))\n","        return np.argmin(distances, axis=0)\n","\n","data = pd.read_csv('reviews_mixed.csv')\n","\n","vectorizer = TfidfVectorizer(stop_words='english')\n","X = vectorizer.fit_transform(data['Text']).toarray()\n","\n","pca = PCA(n_components=2)\n","X_pca = pca.fit_transform(X)\n","\n","kmeans = KMeans(n_clusters=2)\n","kmeans.fit(X_pca)\n","\n","plt.figure(figsize=(8, 6))\n","plt.scatter(X_pca[:, 0], X_pca[:, 1], c=kmeans.labels_, cmap='viridis')\n","plt.scatter(kmeans.centroids[:, 0], kmeans.centroids[:, 1], marker='x', color='red', label='Centroids')\n","plt.xlabel('PCA Feature 1')\n","plt.ylabel('PCA Feature 2')\n","plt.title(f'KMeans Clustering on Text Data (Iteration {i+1})')\n","plt.legend()\n","plt.show()\n","\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":564},"id":"oI_-1oWVtcVU","executionInfo":{"status":"ok","timestamp":1715890161873,"user_tz":-180,"elapsed":794,"user":{"displayName":"Dana Rusu","userId":"09652823823802193394"}},"outputId":"4f0c16db-1f5c-4482-8a19-72701e701c60"},"execution_count":7,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 800x600 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"code","source":["import numpy as np\n","import pandas as pd\n","from sklearn.cluster import KMeans, DBSCAN, AgglomerativeClustering\n","from sklearn.metrics import silhouette_score\n","from sklearn.feature_extraction.text import TfidfVectorizer\n","from sklearn.decomposition import PCA\n","import matplotlib.pyplot as plt\n","\n","data = pd.read_csv('reviews_mixed.csv')\n","\n","vectorizer = TfidfVectorizer(stop_words='english')\n","X = vectorizer.fit_transform(data['Text']).toarray()\n","\n","pca = PCA(n_components=2)\n","X_pca = pca.fit_transform(X)\n","\n","kmeans = KMeans(n_clusters=2, random_state=42)\n","kmeans.fit(X_pca)\n","kmeans_labels = kmeans.labels_\n","\n","dbscan = DBSCAN(eps=0.3, min_samples=5)\n","dbscan.fit(X_pca)\n","dbscan_labels = dbscan.labels_\n","\n","agg_clustering = AgglomerativeClustering(n_clusters=2)\n","agg_clustering.fit(X_pca)\n","agg_labels = agg_clustering.labels_\n","\n","kmeans_silhouette_avg = silhouette_score(X_pca, kmeans_labels)\n","print(\"KMeans Silhouette Score:\", kmeans_silhouette_avg)\n","\n","if len(set(dbscan_labels)) > 1:\n","    dbscan_silhouette_avg = silhouette_score(X_pca, dbscan_labels)\n","    print(\"DBSCAN Silhouette Score:\", dbscan_silhouette_avg)\n","else:\n","    print(\"DBSCAN nu a reusit sa gaseasca mai multe clustere.\")\n","\n","agg_silhouette_avg = silhouette_score(X_pca, agg_labels)\n","print(\"Agglomerative Clustering Silhouette Score:\", agg_silhouette_avg)\n","\n","fig, axes = plt.subplots(1, 3, figsize=(15, 5))\n","\n","axes[0].scatter(X_pca[:, 0], X_pca[:, 1], c=kmeans_labels, cmap='viridis', marker='o')\n","axes[0].set_title(f'KMeans Clustering\\nSilhouette Score: {kmeans_silhouette_avg:.2f}')\n","\n","axes[1].scatter(X_pca[:, 0], X_pca[:, 1], c=dbscan_labels, cmap='viridis', marker='o')\n","axes[1].set_title(f'DBSCAN Clustering\\nSilhouette Score: {dbscan_silhouette_avg:.2f}' if len(set(dbscan_labels)) > 1 else \"DBSCAN Clustering\\nSilhouette Score: N/A\")\n","\n","axes[2].scatter(X_pca[:, 0], X_pca[:, 1], c=agg_labels, cmap='viridis', marker='o')\n","axes[2].set_title(f'Agglomerative Clustering\\nSilhouette Score: {agg_silhouette_avg:.2f}')\n","\n","plt.show()\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":550},"id":"0jYYN7anB3nM","executionInfo":{"status":"ok","timestamp":1715890321197,"user_tz":-180,"elapsed":1220,"user":{"displayName":"Dana Rusu","userId":"09652823823802193394"}},"outputId":"3c9201b1-df92-4238-b8cf-7c2385832f5e"},"execution_count":10,"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/sklearn/cluster/_kmeans.py:870: FutureWarning: The default value of `n_init` will change from 10 to 'auto' in 1.4. Set the value of `n_init` explicitly to suppress the warning\n","  warnings.warn(\n"]},{"output_type":"stream","name":"stdout","text":["KMeans Silhouette Score: 0.7268360894852152\n","DBSCAN nu a reusit sa gaseasca mai multe clustere.\n","Agglomerative Clustering Silhouette Score: 0.7193008621325708\n"]},{"output_type":"display_data","data":{"text/plain":["<Figure size 1500x500 with 3 Axes>"],"image/png":"\n"},"metadata":{}}]}]}