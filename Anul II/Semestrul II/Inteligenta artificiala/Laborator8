{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyMdIAm8OkQN0GBGWWurwQLF"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","source":["from google.colab import files\n","import pandas as pd\n","\n","uploaded = files.upload()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":73},"id":"IzzAZdbT6HdZ","executionInfo":{"status":"ok","timestamp":1714136213859,"user_tz":-180,"elapsed":13361,"user":{"displayName":"Dana Rusu","userId":"09652823823802193394"}},"outputId":"964a94e1-0284-4c11-e0ac-0127fb73d399"},"execution_count":null,"outputs":[{"output_type":"display_data","data":{"text/plain":["<IPython.core.display.HTML object>"],"text/html":["\n","     <input type=\"file\" id=\"files-ae2505ec-4112-4340-8656-855d9a3f0f61\" name=\"files[]\" multiple disabled\n","        style=\"border:none\" />\n","     <output id=\"result-ae2505ec-4112-4340-8656-855d9a3f0f61\">\n","      Upload widget is only available when the cell has been executed in the\n","      current browser session. Please rerun this cell to enable.\n","      </output>\n","      <script>// Copyright 2017 Google LLC\n","//\n","// Licensed under the Apache License, Version 2.0 (the \"License\");\n","// you may not use this file except in compliance with the License.\n","// You may obtain a copy of the License at\n","//\n","//      http://www.apache.org/licenses/LICENSE-2.0\n","//\n","// Unless required by applicable law or agreed to in writing, software\n","// distributed under the License is distributed on an \"AS IS\" BASIS,\n","// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n","// See the License for the specific language governing permissions and\n","// limitations under the License.\n","\n","/**\n"," * @fileoverview Helpers for google.colab Python module.\n"," */\n","(function(scope) {\n","function span(text, styleAttributes = {}) {\n","  const element = document.createElement('span');\n","  element.textContent = text;\n","  for (const key of Object.keys(styleAttributes)) {\n","    element.style[key] = styleAttributes[key];\n","  }\n","  return element;\n","}\n","\n","// Max number of bytes which will be uploaded at a time.\n","const MAX_PAYLOAD_SIZE = 100 * 1024;\n","\n","function _uploadFiles(inputId, outputId) {\n","  const steps = uploadFilesStep(inputId, outputId);\n","  const outputElement = document.getElementById(outputId);\n","  // Cache steps on the outputElement to make it available for the next call\n","  // to uploadFilesContinue from Python.\n","  outputElement.steps = steps;\n","\n","  return _uploadFilesContinue(outputId);\n","}\n","\n","// This is roughly an async generator (not supported in the browser yet),\n","// where there are multiple asynchronous steps and the Python side is going\n","// to poll for completion of each step.\n","// This uses a Promise to block the python side on completion of each step,\n","// then passes the result of the previous step as the input to the next step.\n","function _uploadFilesContinue(outputId) {\n","  const outputElement = document.getElementById(outputId);\n","  const steps = outputElement.steps;\n","\n","  const next = steps.next(outputElement.lastPromiseValue);\n","  return Promise.resolve(next.value.promise).then((value) => {\n","    // Cache the last promise value to make it available to the next\n","    // step of the generator.\n","    outputElement.lastPromiseValue = value;\n","    return next.value.response;\n","  });\n","}\n","\n","/**\n"," * Generator function which is called between each async step of the upload\n"," * process.\n"," * @param {string} inputId Element ID of the input file picker element.\n"," * @param {string} outputId Element ID of the output display.\n"," * @return {!Iterable<!Object>} Iterable of next steps.\n"," */\n","function* uploadFilesStep(inputId, outputId) {\n","  const inputElement = document.getElementById(inputId);\n","  inputElement.disabled = false;\n","\n","  const outputElement = document.getElementById(outputId);\n","  outputElement.innerHTML = '';\n","\n","  const pickedPromise = new Promise((resolve) => {\n","    inputElement.addEventListener('change', (e) => {\n","      resolve(e.target.files);\n","    });\n","  });\n","\n","  const cancel = document.createElement('button');\n","  inputElement.parentElement.appendChild(cancel);\n","  cancel.textContent = 'Cancel upload';\n","  const cancelPromise = new Promise((resolve) => {\n","    cancel.onclick = () => {\n","      resolve(null);\n","    };\n","  });\n","\n","  // Wait for the user to pick the files.\n","  const files = yield {\n","    promise: Promise.race([pickedPromise, cancelPromise]),\n","    response: {\n","      action: 'starting',\n","    }\n","  };\n","\n","  cancel.remove();\n","\n","  // Disable the input element since further picks are not allowed.\n","  inputElement.disabled = true;\n","\n","  if (!files) {\n","    return {\n","      response: {\n","        action: 'complete',\n","      }\n","    };\n","  }\n","\n","  for (const file of files) {\n","    const li = document.createElement('li');\n","    li.append(span(file.name, {fontWeight: 'bold'}));\n","    li.append(span(\n","        `(${file.type || 'n/a'}) - ${file.size} bytes, ` +\n","        `last modified: ${\n","            file.lastModifiedDate ? file.lastModifiedDate.toLocaleDateString() :\n","                                    'n/a'} - `));\n","    const percent = span('0% done');\n","    li.appendChild(percent);\n","\n","    outputElement.appendChild(li);\n","\n","    const fileDataPromise = new Promise((resolve) => {\n","      const reader = new FileReader();\n","      reader.onload = (e) => {\n","        resolve(e.target.result);\n","      };\n","      reader.readAsArrayBuffer(file);\n","    });\n","    // Wait for the data to be ready.\n","    let fileData = yield {\n","      promise: fileDataPromise,\n","      response: {\n","        action: 'continue',\n","      }\n","    };\n","\n","    // Use a chunked sending to avoid message size limits. See b/62115660.\n","    let position = 0;\n","    do {\n","      const length = Math.min(fileData.byteLength - position, MAX_PAYLOAD_SIZE);\n","      const chunk = new Uint8Array(fileData, position, length);\n","      position += length;\n","\n","      const base64 = btoa(String.fromCharCode.apply(null, chunk));\n","      yield {\n","        response: {\n","          action: 'append',\n","          file: file.name,\n","          data: base64,\n","        },\n","      };\n","\n","      let percentDone = fileData.byteLength === 0 ?\n","          100 :\n","          Math.round((position / fileData.byteLength) * 100);\n","      percent.textContent = `${percentDone}% done`;\n","\n","    } while (position < fileData.byteLength);\n","  }\n","\n","  // All done.\n","  yield {\n","    response: {\n","      action: 'complete',\n","    }\n","  };\n","}\n","\n","scope.google = scope.google || {};\n","scope.google.colab = scope.google.colab || {};\n","scope.google.colab._files = {\n","  _uploadFiles,\n","  _uploadFilesContinue,\n","};\n","})(self);\n","</script> "]},"metadata":{}},{"output_type":"stream","name":"stdout","text":["Saving poezie.txt to poezie.txt\n"]}]},{"cell_type":"markdown","source":["# 1"],"metadata":{"id":"-icx-CCy5Syj"}},{"cell_type":"markdown","source":["## 1 a"],"metadata":{"id":"gTeJ5XWB5Ven"}},{"cell_type":"code","source":["import nltk\n","nltk.download('punkt')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Y6gqDI0oFAmE","executionInfo":{"status":"ok","timestamp":1714136333862,"user_tz":-180,"elapsed":805,"user":{"displayName":"Dana Rusu","userId":"09652823823802193394"}},"outputId":"a403856d-b10e-41ef-c33c-94a18b45ace9"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stderr","text":["[nltk_data] Downloading package punkt to /root/nltk_data...\n","[nltk_data]   Unzipping tokenizers/punkt.zip.\n"]},{"output_type":"execute_result","data":{"text/plain":["True"]},"metadata":{},"execution_count":5}]},{"cell_type":"code","source":["import numpy as np\n","import pandas as pd\n","import os\n","import re\n","import string\n","from nltk.tokenize import word_tokenize\n","from nltk.corpus import stopwords\n","import random\n","\n","#reading\n","\n","path='proverbe.txt'\n","\n","def read_all(path):\n","  txt=[]\n","  with open('proverbe.txt', 'r') as file:\n","    for line in file:\n","      if line!='': txt.append(line)\n","  return txt\n","\n","prvb=read_all(path)\n","\n","#cleaning\n","\n","def clean_txt(txt):\n","  cleaned_txt=[]\n","  for line in txt:\n","    line=line.lower()\n","    line=re.sub(r\"[,.\\\"\\'!@#$%^&*(){}?/;`~:+=\\\\]\",\"\",line)\n","    tokens=word_tokenize(line)\n","    words=[word for word in tokens if word.isalpha()]\n","    cleaned_txt+=words\n","  return cleaned_txt\n","\n","cleaned=clean_txt(prvb)\n","\n","#creating the markov model\n","\n","def markov_model(cleaned,n=1):\n","  markov_model={}\n","  for i in range(len(cleaned)-n-(n-1)):\n","    current,next=\"\",\"\"\n","    for j in range(n):\n","      current+=cleaned[i+j]+\" \"\n","      next+=cleaned[i+j+n]+\" \"\n","    current=current[:-1]\n","    next=next[:-1]\n","    if current not in markov_model:\n","      markov_model[current]={}\n","      markov_model[current][next]=1\n","    else:\n","      if next in markov_model[current]:\n","        markov_model[current][next]+=1\n","      else:\n","        markov_model[current][next]=1\n","\n","  for current,transition in markov_model.items():\n","    total=sum(transition.values())\n","    for state,count in transition.items():\n","      markov_model[current][state]=count/total\n","\n","  return markov_model\n","\n","markov=markov_model(cleaned)\n","\n","#generating\n","\n","def generate_prvb(markov, limit, start):\n","    n = 0\n","    current = start\n","    prvb = \"\"\n","    prvb += current + \" \"\n","\n","    while n < limit:\n","        if current in markov:\n","            next_state = random.choices(list(markov[current].keys()), list(markov[current].values()))\n","            current = next_state[0]\n","            prvb += current + \" \"\n","            n += 1\n","        else:\n","            break  # If the current state is not in the markov model, stop generating\n","\n","    return prvb\n","\n","for i in range(30):\n","  print(str(i)+\". \",generate_prvb(markov,limit=10,start=\"cine\"))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"MsoKUUnJHTnj","executionInfo":{"status":"ok","timestamp":1714079776983,"user_tz":-180,"elapsed":302,"user":{"displayName":"Dana Rusu","userId":"09652823823802193394"}},"outputId":"99c7f854-5550-4fc0-feed-3716f0db51c0"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["0.  cine fura un bou si betivul spun ca sa se cearta \n","1.  cine te arde de negru nu ii in doua ori pestele \n","2.  cine nu e negustor cinstit iarba rea nu se face un \n","3.  cine seamana vant culege furtuna cine te necajeste omul prost sa \n","4.  cine fura un nebun intreaba mai aproape de asfintit nu poate \n","5.  cine imparte parte nu cade departe ajungi incetul cu sacul lacomului \n","6.  cine sapa groapa nu face rai batranete haine grele bine gura \n","7.  cine se ia cine se piaptana tara arde si din talpa \n","8.  cine intreaba mai aproape de dimineata departe ajunge cine poate desface \n","9.  cine alearga si pe om nevoia te invata din talpa casei \n","10.  cine se uita ochii care trage a disparut de harta ochii \n","11.  cine nu il vezi in fundul in mana nu da cu \n","12.  cine imparte parte nu e cald a face otetul invata nimeni \n","13.  cine stie de prosti pentru cioara vopsita ai a bate apa \n","14.  cine nu te necajeste omul cand lumea rasul te rade mai \n","15.  cine da taina catre toti razbunarea e cel care trage a \n","16.  cine aduna cine are un bine cu biciul incet cu drumul \n","17.  cine are la apa a face cine stie stanga ce am \n","18.  cine aduna cine nu da taina catre toti razbunarea e bun \n","19.  cine are patru a da bir cu biciul incet cu pietre \n","20.  cine nu scoate ochii sunt fereastra sufletului ochii sunt fereastra sufletului \n","21.  cine nu lauda ciocanul trei lucruri nu locul pe cui ii \n","22.  cine stie punctualitatea ii da taina catre toti razbunarea e de \n","23.  cine fura azi nu iese soarele pe taraba gandeste prostul de \n","24.  cine se adune cine alearga dupa mine potopul dupa razboi multi \n","25.  cine esti beat de oala sparta rade si nu se spele \n","26.  cine rade mai mult pagubeste lacomia pierde omenia lacusta nu au \n","27.  cine te invata sluga hoata si lacat la cap se acuza \n","28.  cine are nemultumitului i se piaptana tara arde jur acum pana \n","29.  cine esti stapanul zgarcit invata sluga hoata si ce ii e \n"]}]},{"cell_type":"markdown","source":["## 1 b"],"metadata":{"id":"KYMctp6cHKN2"}},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"jqgDBBOh5BXU","executionInfo":{"status":"ok","timestamp":1714079725104,"user_tz":-180,"elapsed":255,"user":{"displayName":"Dana Rusu","userId":"09652823823802193394"}},"outputId":"df2fc221-3e6c-4f51-8d69-88524d24363c"},"outputs":[{"output_type":"stream","name":"stdout","text":["0.  a face pe cineva de doua parale a face treaba in doi peri a face umbra pamantului degeaba a face un bine inseamna a isi bate cuie in talpa a fi cu ochii in patru a fi pe drojdie cu banii a fi prins \n","1.  a face pe cineva cu ou si cu otet a face pe cineva de doua parale a face treaba in doi peri a face umbra pamantului degeaba a face un bine inseamna a isi bate cuie in talpa a fi cu ochii in patru \n","2.  a face pe cineva de doua parale a face treaba in doi peri a face umbra pamantului degeaba a face un bine inseamna a isi bate cuie in talpa a fi cu ochii in patru a fi pe drojdie cu banii a fi prins \n","3.  a face pe cineva de doua parale a face treaba in doi peri a face umbra pamantului degeaba a face un bine inseamna a isi bate cuie in talpa a fi cu ochii in patru a fi pe drojdie cu banii a fi prins \n","4.  a face pe cineva de doua parale a face treaba in doi peri a face umbra pamantului degeaba a face un bine inseamna a isi bate cuie in talpa a fi cu ochii in patru a fi pe drojdie cu banii a fi prins \n","5.  a face pe cineva de doua parale a face treaba in doi peri a face umbra pamantului degeaba a face un bine inseamna a isi bate cuie in talpa a fi cu ochii in patru a fi pe drojdie cu banii a fi prins \n","6.  a face pe cineva cu ou si cu otet a face pe cineva de doua parale a face treaba in doi peri a face umbra pamantului degeaba a face un bine inseamna a isi bate cuie in talpa a fi cu ochii in patru \n","7.  a face pe cineva de doua parale a face treaba in doi peri a face umbra pamantului degeaba a face un bine inseamna a isi bate cuie in talpa a fi cu ochii in patru a fi pe drojdie cu banii a fi prins \n","8.  a face pe cineva de doua parale a face treaba in doi peri a face umbra pamantului degeaba a face un bine inseamna a isi bate cuie in talpa a fi cu ochii in patru a fi pe drojdie cu banii a fi prins \n","9.  a face pe cineva de doua parale a face treaba in doi peri a face umbra pamantului degeaba a face un bine inseamna a isi bate cuie in talpa a fi cu ochii in patru a fi pe drojdie cu banii a fi prins \n"]}],"source":["import numpy as np\n","import pandas as pd\n","import os\n","import re\n","import string\n","from nltk.tokenize import word_tokenize\n","from nltk.corpus import stopwords\n","import random\n","\n","#reading\n","\n","path='proverbe.txt'\n","\n","def read_all(path):\n","  txt=[]\n","  with open('proverbe.txt', 'r') as file:\n","    for line in file:\n","      if line!='': txt.append(line)\n","  return txt\n","\n","prvb=read_all(path)\n","\n","#cleaning\n","\n","def clean_txt(txt):\n","  cleaned_txt=[]\n","  for line in txt:\n","    line=line.lower()\n","    line=re.sub(r\"[,.\\\"\\'!@#$%^&*(){}?/;`~:+=\\\\]\",\"\",line)\n","    tokens=word_tokenize(line)\n","    words=[word for word in tokens if word.isalpha()]\n","    cleaned_txt+=words\n","  return cleaned_txt\n","\n","cleaned=clean_txt(prvb)\n","\n","#creating the markov model\n","\n","def markov_model(cleaned,n=4):\n","  markov_model={}\n","  for i in range(len(cleaned)-n-(n-1)):\n","    current,next=\"\",\"\"\n","    for j in range(n):\n","      current+=cleaned[i+j]+\" \"\n","      next+=cleaned[i+j+n]+\" \"\n","    current=current[:-1]\n","    next=next[:-1]\n","    if current not in markov_model:\n","      markov_model[current]={}\n","      markov_model[current][next]=1\n","    else:\n","      if next in markov_model[current]:\n","        markov_model[current][next]+=1\n","      else:\n","        markov_model[current][next]=1\n","\n","  for current,transition in markov_model.items():\n","    total=sum(transition.values())\n","    for state,count in transition.items():\n","      markov_model[current][state]=count/total\n","\n","  return markov_model\n","\n","markov=markov_model(cleaned)\n","\n","#generating\n","\n","def generate_prvb(markov, limit, start):\n","    n = 0\n","    current = start\n","    prvb = \"\"\n","    prvb += current + \" \"\n","\n","    while n < limit:\n","        if current in markov:\n","            next_state = random.choices(list(markov[current].keys()), list(markov[current].values()))\n","            current = next_state[0]\n","            prvb += current + \" \"\n","            n += 1\n","        else:\n","            break  # If the current state is not in the markov model, stop generating\n","\n","    return prvb\n","\n","for i in range(10):\n","  print(str(i)+\". \",generate_prvb(markov,limit=10,start=\"a face pe cineva\"))"]},{"cell_type":"markdown","source":["# 2"],"metadata":{"id":"oHM2YL2RHqNP"}},{"cell_type":"code","source":["!pip install markovify"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"HJCFDE5tJedZ","executionInfo":{"status":"ok","timestamp":1714080324218,"user_tz":-180,"elapsed":9076,"user":{"displayName":"Dana Rusu","userId":"09652823823802193394"}},"outputId":"232ae4ea-62f2-4efb-e24a-d84bea278250"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Collecting markovify\n","  Downloading markovify-0.9.4.tar.gz (27 kB)\n","  Preparing metadata (setup.py) ... \u001b[?25l\u001b[?25hdone\n","Collecting unidecode (from markovify)\n","  Downloading Unidecode-1.3.8-py3-none-any.whl (235 kB)\n","\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m235.5/235.5 kB\u001b[0m \u001b[31m5.8 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hBuilding wheels for collected packages: markovify\n","  Building wheel for markovify (setup.py) ... \u001b[?25l\u001b[?25hdone\n","  Created wheel for markovify: filename=markovify-0.9.4-py3-none-any.whl size=18608 sha256=82213dd0099e2220c2d1975e87d472a02fa0b220dab15a7e26f289fb5ade7231\n","  Stored in directory: /root/.cache/pip/wheels/ca/8c/c5/41413e24c484f883a100c63ca7b3b0362b7c6f6eb6d7c9cc7f\n","Successfully built markovify\n","Installing collected packages: unidecode, markovify\n","Successfully installed markovify-0.9.4 unidecode-1.3.8\n"]}]},{"cell_type":"markdown","source":["## 2 a"],"metadata":{"id":"3igF6hefHrQu"}},{"cell_type":"code","source":["import numpy as np\n","import pandas as pd\n","import os\n","import re\n","import string\n","from nltk.tokenize import word_tokenize\n","from nltk.corpus import stopwords\n","import random\n","\n","path='poetry.txt'\n","\n","def read_all(path):\n","  txt=[]\n","  with open('poetry.txt', 'r') as file:\n","    for line in file:\n","      if line!='': txt.append(line)\n","  return txt\n","\n","text=read_all(path)\n","\n","\n","def clean_txt(txt):\n","    cleaned_txt = []\n","    for line in txt:\n","        line = line.lower()\n","        line = re.sub(r\"[,.\\\"\\'!@#$%^&*(){}?/;`~:+=\\\\]\", \"\", line)\n","        tokens = word_tokenize(line)\n","        words = [word for word in tokens if word.isalpha()]\n","        cleaned_txt += words\n","    return cleaned_txt\n","\n","cleaned = clean_txt(text)\n","\n","def markov_model(cleaned, n=4):\n","    markov_model = {}\n","    for i in range(len(cleaned)-n-(n-1)):\n","        current, next = \"\", \"\"\n","        for j in range(n):\n","            current += cleaned[i+j] + \" \"\n","            next += cleaned[i+j+n] + \" \"\n","        current = current.strip()\n","        next = next.strip()\n","        if current not in markov_model:\n","            markov_model[current] = {}\n","            markov_model[current][next] = 1\n","        else:\n","            if next in markov_model[current]:\n","                markov_model[current][next] += 1\n","            else:\n","                markov_model[current][next] = 1\n","\n","    for current, transition in markov_model.items():\n","        total = sum(transition.values())\n","        for state, count in transition.items():\n","            markov_model[current][state] = count / total\n","\n","    return markov_model\n","\n","markov = markov_model(cleaned)\n","\n","def generate_proverbs(markov, limit):\n","    proverbs = []\n","    for _ in range(limit):\n","        n = random.randint(8, 12)\n","        current = random.choice(list(markov.keys()))\n","        proverb = current + \" \"\n","        while len(word_tokenize(proverb)) < n:\n","            if current in markov:\n","                next_state = random.choices(list(markov[current].keys()), list(markov[current].values()))\n","                current = next_state[0]\n","                proverb += current + \" \"\n","            else:\n","                break\n","        proverbs.append(proverb.strip())\n","    return proverbs\n","\n","for i, proverb in enumerate(generate_proverbs(markov, limit=14), start=1):\n","    print(f\"{proverb}\")\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Ti92uEESHwcj","executionInfo":{"status":"ok","timestamp":1714130834338,"user_tz":-180,"elapsed":339,"user":{"displayName":"Dana Rusu","userId":"09652823823802193394"}},"outputId":"371f6f1e-a545-4f8f-ccc5-6d5228198f8b"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["lies thy self thy foe to thy sweet self too cruel thou\n","live for having traffic with thy self alone thou of thy self\n","thy self thy foe to thy sweet self\n","same and that unfair which fairly doth excel\n","fair whose uneared womb disdains the tillage of thy husbandry or who\n","eat the worlds due by the grave and\n","shame and thriftless praise how much more praise\n","thy husbandry or who is he so fond will be the tomb\n","canst thou leave thy unused beauty must be tombed with thee which\n","every where then were not summers distillation left a liquid prisoner pent\n","increase that thereby beautys rose might never die\n","count and make my old excuse proving his\n","field thy youths proud livery so gazed on\n","all thy beauty lies where all the treasure of thy lusty days\n"]}]},{"cell_type":"code","source":["import numpy as np\n","import pandas as pd\n","import os\n","import re\n","import string\n","from nltk.tokenize import word_tokenize\n","from nltk.corpus import stopwords\n","import random\n","\n","\n","link = \"https://www.shakespeares-sonnets.com/all.php\"\n","f = urllib.request.urlopen(link)\n","response = f.read()\n","\n","soup = BeautifulSoup(response, \"html.parser\")\n","\n","\n","elements_br = soup.find_all(\"br\")\n","\n","text = \"\"\n","for br in elements_br:\n","    current = br\n","    while current.name != \"body\":\n","        current = current.parent\n","        if current.name == \"br\":\n","            break\n","    if current.name != \"br\":\n","        text += current.get_text(strip=True) + \" \"\n","\n","\n","def clean_txt(txt):\n","    cleaned_txt = []\n","    for line in txt:\n","        line = line.lower()\n","        line = re.sub(r\"[,.\\\"\\'!@#$%^&*(){}?/;`~:+=\\\\]\", \"\", line)\n","        tokens = word_tokenize(line)\n","        words = [word for word in tokens if word.isalpha()]\n","        cleaned_txt += words\n","    return cleaned_txt\n","\n","cleaned = clean_txt(text)\n","\n","\n","def markov_model(cleaned, n=4):\n","    markov_model = {}\n","    for i in range(len(cleaned)-n-(n-1)):\n","        current, next = \"\", \"\"\n","        for j in range(n):\n","            current += cleaned[i+j] + \" \"\n","            next += cleaned[i+j+n] + \" \"\n","        current = current.strip()\n","        next = next.strip()\n","        if current not in markov_model:\n","            markov_model[current] = {}\n","            markov_model[current][next] = 1\n","        else:\n","            if next in markov_model[current]:\n","                markov_model[current][next] += 1\n","            else:\n","                markov_model[current][next] = 1\n","\n","    for current, transition in markov_model.items():\n","        total = sum(transition.values())\n","        for state, count in transition.items():\n","            markov_model[current][state] = count / total\n","\n","    return markov_model\n","\n","markov = markov_model(cleaned)\n","\n","\n","def generate_proverbs(markov, limit):\n","    proverbs = []\n","    for _ in range(limit):\n","        n = random.randint(8, 12)\n","        current = random.choice(list(markov.keys()))\n","        proverb = current + \" \"\n","        while len(word_tokenize(proverb)) < n:\n","            if current in markov:\n","                next_state = random.choices(list(markov[current].keys()), list(markov[current].values()))\n","                current = next_state[0]\n","                proverb += current + \" \"\n","            else:\n","                break\n","        proverbs.append(proverb.strip())\n","    return proverbs\n","\n","for i, proverb in enumerate(generate_proverbs(markov, limit=14), start=1):\n","    print(f\"{i}. {proverb}\")\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":369},"id":"xyPg0z70h7Oj","executionInfo":{"status":"error","timestamp":1714087514420,"user_tz":-180,"elapsed":61131,"user":{"displayName":"Dana Rusu","userId":"09652823823802193394"}},"outputId":"33ae7139-3965-462b-cb5b-70b9e6b38017"},"execution_count":null,"outputs":[{"output_type":"error","ename":"KeyboardInterrupt","evalue":"","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mKeyboardInterrupt\u001b[0m                         Traceback (most recent call last)","\u001b[0;32m<ipython-input-62-a1ccf74b2e1a>\u001b[0m in \u001b[0;36m<cell line: 42>\u001b[0;34m()\u001b[0m\n\u001b[1;32m     40\u001b[0m     \u001b[0;32mreturn\u001b[0m \u001b[0mcleaned_txt\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     41\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 42\u001b[0;31m \u001b[0mcleaned\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mclean_txt\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtext\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     43\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     44\u001b[0m \u001b[0;31m# Cream un model Markov\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m<ipython-input-62-a1ccf74b2e1a>\u001b[0m in \u001b[0;36mclean_txt\u001b[0;34m(txt)\u001b[0m\n\u001b[1;32m     35\u001b[0m         \u001b[0mline\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mline\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mlower\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     36\u001b[0m         \u001b[0mline\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mre\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msub\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34mr\"[,.\\\"\\'!@#$%^&*(){}?/;`~:+=\\\\]\"\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m\"\"\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mline\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 37\u001b[0;31m         \u001b[0mtokens\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mword_tokenize\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mline\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     38\u001b[0m         \u001b[0mwords\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0mword\u001b[0m \u001b[0;32mfor\u001b[0m \u001b[0mword\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mtokens\u001b[0m \u001b[0;32mif\u001b[0m \u001b[0mword\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0misalpha\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     39\u001b[0m         \u001b[0mcleaned_txt\u001b[0m \u001b[0;34m+=\u001b[0m \u001b[0mwords\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/nltk/tokenize/__init__.py\u001b[0m in \u001b[0;36mword_tokenize\u001b[0;34m(text, language, preserve_line)\u001b[0m\n\u001b[1;32m    128\u001b[0m     \"\"\"\n\u001b[1;32m    129\u001b[0m     \u001b[0msentences\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0mtext\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;32mif\u001b[0m \u001b[0mpreserve_line\u001b[0m \u001b[0;32melse\u001b[0m \u001b[0msent_tokenize\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtext\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mlanguage\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 130\u001b[0;31m     return [\n\u001b[0m\u001b[1;32m    131\u001b[0m         \u001b[0mtoken\u001b[0m \u001b[0;32mfor\u001b[0m \u001b[0msent\u001b[0m \u001b[0;32min\u001b[0m \u001b[0msentences\u001b[0m \u001b[0;32mfor\u001b[0m \u001b[0mtoken\u001b[0m \u001b[0;32min\u001b[0m \u001b[0m_treebank_word_tokenizer\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mtokenize\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0msent\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    132\u001b[0m     ]\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/nltk/tokenize/__init__.py\u001b[0m in \u001b[0;36m<listcomp>\u001b[0;34m(.0)\u001b[0m\n\u001b[1;32m    129\u001b[0m     \u001b[0msentences\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0mtext\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;32mif\u001b[0m \u001b[0mpreserve_line\u001b[0m \u001b[0;32melse\u001b[0m \u001b[0msent_tokenize\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtext\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mlanguage\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    130\u001b[0m     return [\n\u001b[0;32m--> 131\u001b[0;31m         \u001b[0mtoken\u001b[0m \u001b[0;32mfor\u001b[0m \u001b[0msent\u001b[0m \u001b[0;32min\u001b[0m \u001b[0msentences\u001b[0m \u001b[0;32mfor\u001b[0m \u001b[0mtoken\u001b[0m \u001b[0;32min\u001b[0m \u001b[0m_treebank_word_tokenizer\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mtokenize\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0msent\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    132\u001b[0m     ]\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/nltk/tokenize/destructive.py\u001b[0m in \u001b[0;36mtokenize\u001b[0;34m(self, text, convert_parentheses, return_str)\u001b[0m\n\u001b[1;32m    181\u001b[0m             \u001b[0mtext\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mregexp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msub\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34mr\" \\1 \\2 \"\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtext\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    182\u001b[0m         \u001b[0;32mfor\u001b[0m \u001b[0mregexp\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mCONTRACTIONS3\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 183\u001b[0;31m             \u001b[0mtext\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mregexp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msub\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34mr\" \\1 \\2 \"\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtext\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    184\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    185\u001b[0m         \u001b[0;31m# We are not using CONTRACTIONS4 since\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mKeyboardInterrupt\u001b[0m: "]}]},{"cell_type":"markdown","source":["## 2 b"],"metadata":{"id":"B7jwCtG6Hsc6"}},{"cell_type":"code","source":["import nltk\n","nltk.download('vader_lexicon')\n","from nltk.sentiment import SentimentIntensityAnalyzer\n","\n","sia = SentimentIntensityAnalyzer()\n","'''\n","path='poezie.txt'\n","\n","def read_all(path):\n","  txt=[]\n","  with open('poezie.txt', 'r') as file:\n","    for line in file:\n","      if line!='': txt.append(line)\n","  return txt\n","\n","text=read_all(path)\n","'''\n","\n","text=\"happy happy\"\n","\n","scores = sia.polarity_scores(text)\n","\n","print(scores)\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"7Sq1A3OuHxFi","executionInfo":{"status":"ok","timestamp":1714138857489,"user_tz":-180,"elapsed":864,"user":{"displayName":"Dana Rusu","userId":"09652823823802193394"}},"outputId":"4b20ec41-ab5c-4b4d-a6ae-22c8901d046f"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["{'neg': 0.0, 'neu': 0.0, 'pos': 1.0, 'compound': 0.8126}\n"]},{"output_type":"stream","name":"stderr","text":["[nltk_data] Downloading package vader_lexicon to /root/nltk_data...\n","[nltk_data]   Package vader_lexicon is already up-to-date!\n"]}]},{"cell_type":"markdown","source":["## 2 c"],"metadata":{"id":"8ayUpTlzHtm9"}},{"cell_type":"code","source":["import gensim.downloader as api\n","from nltk.tokenize import word_tokenize\n","import random\n","\n","model = api.load(\"word2vec-google-news-300\")\n","\n","def find_similar_but_not_same_word(model, word):\n","    similar_words = model.most_similar(word, topn=1)\n","\n","    for similar_word, similarity_score in similar_words:\n","        if similar_word != word and similarity_score > 0.5:\n","            return similar_word\n","\n","    return None\n","\n","def replace_with_similar_but_not_same_words(text):\n","    tokenized_lines = [word_tokenize(line) for line in text]\n","\n","    for line_index, line in enumerate(tokenized_lines):\n","        for word_index, word in enumerate(line):\n","            if word.lower() in model:\n","\n","                similar_word = find_similar_but_not_same_word(model, word.lower())\n","\n","                if similar_word:\n","                    tokenized_lines[line_index][word_index] = similar_word\n","\n","    replaced_text = [\" \".join(line) for line in tokenized_lines]\n","\n","    return replaced_text\n","\n","path = 'poezie.txt'\n","\n","def read_all(path):\n","    txt = []\n","    with open('poezie.txt', 'r') as file:\n","        for line in file:\n","            if line.strip() != '':\n","                txt.append(line.strip())\n","    return txt\n","\n","text = read_all(path)\n","\n","replaced_text = replace_with_similar_but_not_same_words(text)\n","\n","print(\"Original:\")\n","for line in text:\n","    print(line)\n","print(\"\\nReplaced:\")\n","for line in replaced_text:\n","    print(line)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"07Qh-CnhHxew","executionInfo":{"status":"ok","timestamp":1714136753644,"user_tz":-180,"elapsed":133410,"user":{"displayName":"Dana Rusu","userId":"09652823823802193394"}},"outputId":"9f79b1dc-b073-4a35-874a-d852803d320d"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Original:\n","lies thy self thy foe to thy sweet self too cruel thou\n","live for having traffic with thy self alone thou of thy self\n","thy self thy foe to thy sweet self\n","same and that unfair which fairly doth excel\n","fair whose uneared womb disdains the tillage of thy husbandry or who\n","eat the worlds due by the grave and\n","shame and thriftless praise how much more praise\n","thy husbandry or who is he so fond will be the tomb\n","canst thou leave thy unused beauty must be tombed with thee which\n","every where then were not summers distillation left a liquid prisoner pent\n","increase that thereby beautys rose might never die\n","count and make my old excuse proving his\n","field thy youths proud livery so gazed on\n","all thy beauty lies where all the treasure of thy lusty days\n","\n","Replaced:\n","lie thine Self thine foes to thine sweetness Self so Lupit_Filipino_word Thou\n","living forthe being Traffic wtih thine Self annie##_leave_lindsay Thou of thine Self\n","thine Self thine foes to thine sweetness Self\n","Same and it unfairly The pretty thou_wilt excelling\n","Fair His uneared uterus shuns this conservation_tillage of thine animal_husbandry either whom\n","eating this universes owing bythe this graves and\n","disgrace and thriftless plaudits what little less plaudits\n","thine animal_husbandry either whom was He too enamored wil being this tombs\n","canst Thou leaving thine Unused Bowers_Permanent_Collection should being tombed wtih thy The\n","Every outside when are do winters distilled leaving a Milanka_index prisoners Pent\n","decrease it thus beautys surged may not perish\n","counts and making My yearold excuses proved His\n","fields thine youth immensely_proud liveries too stared onthe\n","these thine Bowers_Permanent_Collection lie outside these this treasures of thine saucy weeks\n"]}]},{"cell_type":"markdown","source":["## 2 e"],"metadata":{"id":"l6tvRpOHHuaq"}},{"cell_type":"code","source":["import nltk\n","from nltk.tokenize import word_tokenize\n","from collections import Counter\n","import numpy as np\n","\n","def tokenize(txt):\n","    cleaned_txt = []\n","    for line in txt:\n","        line = line.lower()\n","        tokens = word_tokenize(line)\n","        words = [word for word in tokens if word.isalpha()]\n","        cleaned_txt += words\n","    return cleaned_txt\n","\n","\n","def calculate_precision(reference, generated, n):\n","    ref_ngrams = Counter(nltk.ngrams(tokenize(reference), n))\n","    gen_ngrams = Counter(nltk.ngrams(tokenize(generated), n))\n","    common_ngrams = ref_ngrams & gen_ngrams\n","    precision = sum(common_ngrams.values()) / max(sum(gen_ngrams.values()), 1)\n","    return precision\n","\n","def calculate_brevity_penalty(reference, generated):\n","    ref_length = len(tokenize(reference))\n","    gen_length = len(tokenize(generated))\n","    brevity_penalty = min(1, np.exp(1 - ref_length / gen_length))\n","    return brevity_penalty\n","\n","def calculate_bleu(reference, generated, n):\n","    precisions = [calculate_precision(reference, generated, i) for i in range(1, n+1)]\n","    brevity_penalty = calculate_brevity_penalty(reference, generated)\n","    bleu = brevity_penalty * np.exp(np.mean(np.log(precisions)))\n","    return bleu\n","\n","bleu_score = calculate_bleu(text, replaced_text, 2)\n","print(\"Scor:\", bleu_score)\n"],"metadata":{"id":"jl3PZ9NqHyah","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1714138499021,"user_tz":-180,"elapsed":319,"user":{"displayName":"Dana Rusu","userId":"09652823823802193394"}},"outputId":"b27e1e27-5e92-43d7-d3dc-84fc316f2236"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Scor: 0.09990171786567939\n"]}]}]}