{"cells":[{"cell_type":"markdown","metadata":{"id":"7pSjwfTcekhx"},"source":["Incarcare fisier excel"]},{"cell_type":"code","execution_count":2,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":73},"id":"AwVaFUqZzZIp","executionInfo":{"status":"ok","timestamp":1711103865691,"user_tz":-120,"elapsed":6723,"user":{"displayName":"Dana Rusu","userId":"09652823823802193394"}},"outputId":"6a355f01-6dbe-49d3-8950-b27afca9a24d"},"outputs":[{"output_type":"display_data","data":{"text/plain":["<IPython.core.display.HTML object>"],"text/html":["\n","     <input type=\"file\" id=\"files-fecc4262-c89d-4a73-addd-453ba7da2e3b\" name=\"files[]\" multiple disabled\n","        style=\"border:none\" />\n","     <output id=\"result-fecc4262-c89d-4a73-addd-453ba7da2e3b\">\n","      Upload widget is only available when the cell has been executed in the\n","      current browser session. Please rerun this cell to enable.\n","      </output>\n","      <script>// Copyright 2017 Google LLC\n","//\n","// Licensed under the Apache License, Version 2.0 (the \"License\");\n","// you may not use this file except in compliance with the License.\n","// You may obtain a copy of the License at\n","//\n","//      http://www.apache.org/licenses/LICENSE-2.0\n","//\n","// Unless required by applicable law or agreed to in writing, software\n","// distributed under the License is distributed on an \"AS IS\" BASIS,\n","// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n","// See the License for the specific language governing permissions and\n","// limitations under the License.\n","\n","/**\n"," * @fileoverview Helpers for google.colab Python module.\n"," */\n","(function(scope) {\n","function span(text, styleAttributes = {}) {\n","  const element = document.createElement('span');\n","  element.textContent = text;\n","  for (const key of Object.keys(styleAttributes)) {\n","    element.style[key] = styleAttributes[key];\n","  }\n","  return element;\n","}\n","\n","// Max number of bytes which will be uploaded at a time.\n","const MAX_PAYLOAD_SIZE = 100 * 1024;\n","\n","function _uploadFiles(inputId, outputId) {\n","  const steps = uploadFilesStep(inputId, outputId);\n","  const outputElement = document.getElementById(outputId);\n","  // Cache steps on the outputElement to make it available for the next call\n","  // to uploadFilesContinue from Python.\n","  outputElement.steps = steps;\n","\n","  return _uploadFilesContinue(outputId);\n","}\n","\n","// This is roughly an async generator (not supported in the browser yet),\n","// where there are multiple asynchronous steps and the Python side is going\n","// to poll for completion of each step.\n","// This uses a Promise to block the python side on completion of each step,\n","// then passes the result of the previous step as the input to the next step.\n","function _uploadFilesContinue(outputId) {\n","  const outputElement = document.getElementById(outputId);\n","  const steps = outputElement.steps;\n","\n","  const next = steps.next(outputElement.lastPromiseValue);\n","  return Promise.resolve(next.value.promise).then((value) => {\n","    // Cache the last promise value to make it available to the next\n","    // step of the generator.\n","    outputElement.lastPromiseValue = value;\n","    return next.value.response;\n","  });\n","}\n","\n","/**\n"," * Generator function which is called between each async step of the upload\n"," * process.\n"," * @param {string} inputId Element ID of the input file picker element.\n"," * @param {string} outputId Element ID of the output display.\n"," * @return {!Iterable<!Object>} Iterable of next steps.\n"," */\n","function* uploadFilesStep(inputId, outputId) {\n","  const inputElement = document.getElementById(inputId);\n","  inputElement.disabled = false;\n","\n","  const outputElement = document.getElementById(outputId);\n","  outputElement.innerHTML = '';\n","\n","  const pickedPromise = new Promise((resolve) => {\n","    inputElement.addEventListener('change', (e) => {\n","      resolve(e.target.files);\n","    });\n","  });\n","\n","  const cancel = document.createElement('button');\n","  inputElement.parentElement.appendChild(cancel);\n","  cancel.textContent = 'Cancel upload';\n","  const cancelPromise = new Promise((resolve) => {\n","    cancel.onclick = () => {\n","      resolve(null);\n","    };\n","  });\n","\n","  // Wait for the user to pick the files.\n","  const files = yield {\n","    promise: Promise.race([pickedPromise, cancelPromise]),\n","    response: {\n","      action: 'starting',\n","    }\n","  };\n","\n","  cancel.remove();\n","\n","  // Disable the input element since further picks are not allowed.\n","  inputElement.disabled = true;\n","\n","  if (!files) {\n","    return {\n","      response: {\n","        action: 'complete',\n","      }\n","    };\n","  }\n","\n","  for (const file of files) {\n","    const li = document.createElement('li');\n","    li.append(span(file.name, {fontWeight: 'bold'}));\n","    li.append(span(\n","        `(${file.type || 'n/a'}) - ${file.size} bytes, ` +\n","        `last modified: ${\n","            file.lastModifiedDate ? file.lastModifiedDate.toLocaleDateString() :\n","                                    'n/a'} - `));\n","    const percent = span('0% done');\n","    li.appendChild(percent);\n","\n","    outputElement.appendChild(li);\n","\n","    const fileDataPromise = new Promise((resolve) => {\n","      const reader = new FileReader();\n","      reader.onload = (e) => {\n","        resolve(e.target.result);\n","      };\n","      reader.readAsArrayBuffer(file);\n","    });\n","    // Wait for the data to be ready.\n","    let fileData = yield {\n","      promise: fileDataPromise,\n","      response: {\n","        action: 'continue',\n","      }\n","    };\n","\n","    // Use a chunked sending to avoid message size limits. See b/62115660.\n","    let position = 0;\n","    do {\n","      const length = Math.min(fileData.byteLength - position, MAX_PAYLOAD_SIZE);\n","      const chunk = new Uint8Array(fileData, position, length);\n","      position += length;\n","\n","      const base64 = btoa(String.fromCharCode.apply(null, chunk));\n","      yield {\n","        response: {\n","          action: 'append',\n","          file: file.name,\n","          data: base64,\n","        },\n","      };\n","\n","      let percentDone = fileData.byteLength === 0 ?\n","          100 :\n","          Math.round((position / fileData.byteLength) * 100);\n","      percent.textContent = `${percentDone}% done`;\n","\n","    } while (position < fileData.byteLength);\n","  }\n","\n","  // All done.\n","  yield {\n","    response: {\n","      action: 'complete',\n","    }\n","  };\n","}\n","\n","scope.google = scope.google || {};\n","scope.google.colab = scope.google.colab || {};\n","scope.google.colab._files = {\n","  _uploadFiles,\n","  _uploadFilesContinue,\n","};\n","})(self);\n","</script> "]},"metadata":{}},{"output_type":"stream","name":"stdout","text":["Saving texts.txt to texts.txt\n"]}],"source":["from google.colab import files\n","import pandas as pd\n","\n","uploaded = files.upload()\n"]},{"cell_type":"markdown","metadata":{"id":"2U295kuFhT7f"},"source":["# 1 a"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":920,"status":"ok","timestamp":1710837316656,"user":{"displayName":"Dana Rusu","userId":"09652823823802193394"},"user_tz":-120},"id":"s7uaATivejr2","outputId":"ff0d6e0a-866a-4dce-dbe6-86e41ca5eb49"},"outputs":[{"name":"stdout","output_type":"stream","text":["Numărul total de angajati: 1000\n"]}],"source":["import pandas as pd\n","\n","df = pd.read_csv(\"employees.csv\")\n","\n","num_rows = df.shape[0]\n","\n","print(\"Numărul total de angajati:\", num_rows)\n"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":440,"status":"ok","timestamp":1710831993093,"user":{"displayName":"Dana Rusu","userId":"09652823823802193394"},"user_tz":-120},"id":"h0CL9zrnhWBg","outputId":"788995d3-c381-4439-b5b1-9e5c2d79c76a"},"outputs":[{"name":"stdout","output_type":"stream","text":["Numărul de informatii: 8\n","Informatiile cunoscute despre fiecare angajat:\n","First Name\n","Gender\n","Start Date\n","Last Login Time\n","Salary\n","Bonus %\n","Senior Management\n","Team\n"]}],"source":["import pandas as pd\n","\n","df = pd.read_csv(\"employees.csv\")\n","\n","col = len(df.columns)\n","\n","print(\"Numărul de informatii:\", col)\n","\n","print(\"Informatiile cunoscute despre fiecare angajat:\")\n","for colNume in df.columns:\n","    print(colNume)\n"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":355,"status":"ok","timestamp":1710832613092,"user":{"displayName":"Dana Rusu","userId":"09652823823802193394"},"user_tz":-120},"id":"Q1jodb0xiuh4","outputId":"5a7c3ba3-1393-455d-b02c-63fa1789ad3c"},"outputs":[{"name":"stdout","output_type":"stream","text":["Numarul de angajati pentru care exista toate informatiile necesare:  764\n"]}],"source":["import pandas as pd\n","\n","df = pd.read_csv(\"employees.csv\")\n","\n","nr=0\n","for index,rand in df.iterrows():\n","  if rand.isnull().any():\n","    nr=nr+1\n","\n","print(\"Numarul de angajati pentru care exista toate informatiile necesare: \",df.shape[0]-nr)\n"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"ZoBCn5e-2nVV","executionInfo":{"status":"ok","timestamp":1710869743930,"user_tz":-120,"elapsed":335,"user":{"displayName":"Dana Rusu","userId":"09652823823802193394"}},"outputId":"3dc1950d-bee5-4fde-ce49-2f2724f9922f"},"outputs":[{"output_type":"stream","name":"stdout","text":["Pentru coloana  First Name  avem urmatoarea valoare minima, maxima, respectiv medie:  Aaron Willie Judith\n","Pentru coloana  Gender  avem urmatoarea valoare minima, maxima, respectiv medie:  Female Male Female\n","Pentru coloana  Start Date  avem urmatoarea valoare minima, maxima, respectiv medie:  1980-01-19 00:00:00 2016-07-15 00:00:00 1999-07-22 00:00:00\n","Pentru coloana  Salary  avem urmatoarea valoare minima, maxima, respectiv medie:  35013 149908 90662.181\n","Pentru coloana  Bonus %  avem urmatoarea valoare minima, maxima, respectiv medie:  1.015 19.944 10.207555000000001\n","Pentru coloana  Senior Management  avem urmatoarea valoare minima, maxima, respectiv medie:  False True True\n","Pentru coloana  Team  avem urmatoarea valoare minima, maxima, respectiv medie:  Business Development Sales Finance\n"]}],"source":["import pandas as pd\n","\n","df = pd.read_csv(\"employees.csv\")\n","dfBun=df.dropna()\n","for col in df.columns:\n","  lista=[]\n","  if col==\"Salary\":\n","    minim=df[col].dropna().min()\n","    maxim=df[col].dropna().max()\n","    mediu=df[col].dropna().mean()\n","    print(\"Pentru coloana \", col, \" avem urmatoarea valoare minima, maxima, respectiv medie: \", minim, maxim, mediu)\n","  if col==\"Bonus %\":\n","    minim=df[col].dropna().min()\n","    maxim=df[col].dropna().max()\n","    mediu=df[col].dropna().mean()\n","    print(\"Pentru coloana \", col, \" avem urmatoarea valoare minima, maxima, respectiv medie: \", minim, maxim, mediu)\n","  if col==\"Start Date\":\n","    df['Start Date'] = pd.to_datetime(df['Start Date'], format='%m/%d/%Y')\n","    minim = df['Start Date'].min()\n","    maxim = df['Start Date'].max()\n","    df_sorted = df.sort_values(by='Start Date')\n","    mediu = df_sorted.iloc[len(df_sorted) // 2]['Start Date']\n","    print(\"Pentru coloana \", col, \" avem urmatoarea valoare minima, maxima, respectiv medie: \", minim, maxim, mediu)\n","  elif col==\"First Name\" or col==\"Gender\" or col==\"Last Login\" or col==\"Senior Management\" or col==\"Team\":\n","    for inreg in df[col].dropna():\n","      lista.append(inreg)\n","    lista = [str(element) for element in lista]\n","    lista.sort()\n","    if len(lista)%2==0:\n","      print(\"Pentru coloana \", col, \" avem urmatoarea valoare minima, maxima, respectiv medie: \", lista[0], lista[len(lista)-1], lista[len(lista)//2])\n","    else:\n","      print(\"Pentru coloana \", col, \" avem urmatoarea valoare minima, maxima, respectiv medie: \", lista[0], lista[len(lista)-1], lista[len(lista)//2-1])"]},{"cell_type":"code","source":["import pandas as pd\n","\n","df = pd.read_csv(\"employees.csv\")\n","dfBun = df.dropna()\n","\n","for col in df.columns:\n","  if col != \"Salary\" and col != \"Bonus %\":\n","    #df[col] = df[col].dropna()\n","    print(\"Pentru coloana\", col, \"există\", df[col].nunique(), \"atribute unice\")\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"tOBP73yB0fE-","executionInfo":{"status":"ok","timestamp":1710930584154,"user_tz":-120,"elapsed":266,"user":{"displayName":"Dana Rusu","userId":"09652823823802193394"}},"outputId":"38377514-1f9e-4e4d-b13f-fc63a314282d"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Pentru coloana First Name există 200 atribute unice\n","Pentru coloana Gender există 2 atribute unice\n","Pentru coloana Start Date există 972 atribute unice\n","Pentru coloana Last Login Time există 720 atribute unice\n","Pentru coloana Senior Management există 2 atribute unice\n","Pentru coloana Team există 10 atribute unice\n"]}]},{"cell_type":"code","source":["import pandas as pd\n","\n","df = pd.read_csv(\"employees.csv\")\n","\n","for col in df.columns:\n","  lista=[]\n","  if col==\"Salary\":\n","    mediu=df[col].dropna().mean()\n","    pline=df[col].fillna(mediu)\n","  if col==\"Bonus %\":\n","    mediu=df[col].dropna().mean()\n","    pline=df[col].fillna(mediu)\n","  if col==\"Start Date\":\n","    df['Start Date'] = pd.to_datetime(df['Start Date'], format='%m/%d/%Y')\n","    df_sorted = df.sort_values(by='Start Date')\n","    mediu = df_sorted.iloc[len(df_sorted) // 2]['Start Date']\n","    pline=df[col].fillna(mediu)\n","  elif col==\"First Name\" or col==\"Gender\" or col==\"Last Login\" or col==\"Senior Management\" or col==\"Team\":\n","    for inreg in df[col].dropna():\n","      lista.append(inreg)\n","    lista = [str(element) for element in lista]\n","    lista.sort()\n","    if len(lista)%2==0:\n","      pline=df[col].fillna(lista[len(lista)//2])\n","    else:\n","      pline=df[col].fillna(lista[len(lista)//2-1])\n","\n","#inplace=True ca parametru pentru fillna()"],"metadata":{"id":"qigUaYFjaZsO"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["# 1 b"],"metadata":{"id":"LWF0WxCid890"}},{"cell_type":"code","source":["import pandas as pd\n","import matplotlib.pyplot as plt\n","\n","df = pd.read_csv(\"employees.csv\")\n","\n","plt.hist(df['Salary'], bins=10, color='pink', edgecolor='black')\n","plt.xlabel('Salar')\n","plt.ylabel('Număr angajați')\n","plt.title('Distribuția salariilor angajaților')\n","plt.grid(linestyle='--', linewidth=2, axis='y', alpha=0.9)\n","plt.show()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":472},"id":"ros9eMcdd-LQ","executionInfo":{"status":"ok","timestamp":1710934933978,"user_tz":-120,"elapsed":834,"user":{"displayName":"Dana Rusu","userId":"09652823823802193394"}},"outputId":"4d0f83c7-fed3-40e7-a1cf-978ecc1e7b99"},"execution_count":null,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"code","source":["import pandas as pd\n","import matplotlib.pyplot as plt\n","import seaborn as sns\n","\n","df = pd.read_csv(\"employees.csv\")\n","\n","plt.figure(figsize=(10, 6))\n","sns.barplot(x='Team', y='Salary', data=df, errorbar=None)\n","plt.title('Distribuția salariilor angajaților/echipă')\n","plt.xlabel('Echipă')\n","plt.ylabel('Salar')\n","plt.xticks(rotation=45)\n","plt.show()\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":672},"id":"VmKrbCm3niaZ","executionInfo":{"status":"ok","timestamp":1710935206877,"user_tz":-120,"elapsed":807,"user":{"displayName":"Dana Rusu","userId":"09652823823802193394"}},"outputId":"fc60e4ff-6c8f-4cde-f23e-f2cbfbebb03a"},"execution_count":null,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 1000x600 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"code","source":["import pandas as pd\n","import matplotlib.pyplot as plt\n","import seaborn as sns\n","\n","df = pd.read_csv(\"employees.csv\")\n","\n","q1=df.Salary.quantile(0.01)\n","print(q1)\n","q2=df.Salary.quantile(0.99)\n","print(q2)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"ZMjgXjDOvqFX","executionInfo":{"status":"ok","timestamp":1711104071183,"user_tz":-120,"elapsed":898,"user":{"displayName":"Dana Rusu","userId":"09652823823802193394"}},"outputId":"92f4348d-ac8e-438a-c4da-f02be46993b2"},"execution_count":3,"outputs":[{"output_type":"stream","name":"stdout","text":["36065.17\n","148344.18\n"]}]},{"cell_type":"markdown","source":["# 3"],"metadata":{"id":"TSVMvgqg0hy2"}},{"cell_type":"code","source":["from google.colab import files\n","import pandas as pd\n","\n","uploaded = files.upload()\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":73},"id":"nfrZ5Ndq0j0L","executionInfo":{"status":"ok","timestamp":1710947253372,"user_tz":-120,"elapsed":7051,"user":{"displayName":"Dana Rusu","userId":"09652823823802193394"}},"outputId":"f6865288-0e51-48ed-bf62-9821b392634f"},"execution_count":null,"outputs":[{"output_type":"display_data","data":{"text/plain":["<IPython.core.display.HTML object>"],"text/html":["\n","     <input type=\"file\" id=\"files-f2a6e50b-9005-477b-9ab6-390a2e0692f6\" name=\"files[]\" multiple disabled\n","        style=\"border:none\" />\n","     <output id=\"result-f2a6e50b-9005-477b-9ab6-390a2e0692f6\">\n","      Upload widget is only available when the cell has been executed in the\n","      current browser session. Please rerun this cell to enable.\n","      </output>\n","      <script>// Copyright 2017 Google LLC\n","//\n","// Licensed under the Apache License, Version 2.0 (the \"License\");\n","// you may not use this file except in compliance with the License.\n","// You may obtain a copy of the License at\n","//\n","//      http://www.apache.org/licenses/LICENSE-2.0\n","//\n","// Unless required by applicable law or agreed to in writing, software\n","// distributed under the License is distributed on an \"AS IS\" BASIS,\n","// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n","// See the License for the specific language governing permissions and\n","// limitations under the License.\n","\n","/**\n"," * @fileoverview Helpers for google.colab Python module.\n"," */\n","(function(scope) {\n","function span(text, styleAttributes = {}) {\n","  const element = document.createElement('span');\n","  element.textContent = text;\n","  for (const key of Object.keys(styleAttributes)) {\n","    element.style[key] = styleAttributes[key];\n","  }\n","  return element;\n","}\n","\n","// Max number of bytes which will be uploaded at a time.\n","const MAX_PAYLOAD_SIZE = 100 * 1024;\n","\n","function _uploadFiles(inputId, outputId) {\n","  const steps = uploadFilesStep(inputId, outputId);\n","  const outputElement = document.getElementById(outputId);\n","  // Cache steps on the outputElement to make it available for the next call\n","  // to uploadFilesContinue from Python.\n","  outputElement.steps = steps;\n","\n","  return _uploadFilesContinue(outputId);\n","}\n","\n","// This is roughly an async generator (not supported in the browser yet),\n","// where there are multiple asynchronous steps and the Python side is going\n","// to poll for completion of each step.\n","// This uses a Promise to block the python side on completion of each step,\n","// then passes the result of the previous step as the input to the next step.\n","function _uploadFilesContinue(outputId) {\n","  const outputElement = document.getElementById(outputId);\n","  const steps = outputElement.steps;\n","\n","  const next = steps.next(outputElement.lastPromiseValue);\n","  return Promise.resolve(next.value.promise).then((value) => {\n","    // Cache the last promise value to make it available to the next\n","    // step of the generator.\n","    outputElement.lastPromiseValue = value;\n","    return next.value.response;\n","  });\n","}\n","\n","/**\n"," * Generator function which is called between each async step of the upload\n"," * process.\n"," * @param {string} inputId Element ID of the input file picker element.\n"," * @param {string} outputId Element ID of the output display.\n"," * @return {!Iterable<!Object>} Iterable of next steps.\n"," */\n","function* uploadFilesStep(inputId, outputId) {\n","  const inputElement = document.getElementById(inputId);\n","  inputElement.disabled = false;\n","\n","  const outputElement = document.getElementById(outputId);\n","  outputElement.innerHTML = '';\n","\n","  const pickedPromise = new Promise((resolve) => {\n","    inputElement.addEventListener('change', (e) => {\n","      resolve(e.target.files);\n","    });\n","  });\n","\n","  const cancel = document.createElement('button');\n","  inputElement.parentElement.appendChild(cancel);\n","  cancel.textContent = 'Cancel upload';\n","  const cancelPromise = new Promise((resolve) => {\n","    cancel.onclick = () => {\n","      resolve(null);\n","    };\n","  });\n","\n","  // Wait for the user to pick the files.\n","  const files = yield {\n","    promise: Promise.race([pickedPromise, cancelPromise]),\n","    response: {\n","      action: 'starting',\n","    }\n","  };\n","\n","  cancel.remove();\n","\n","  // Disable the input element since further picks are not allowed.\n","  inputElement.disabled = true;\n","\n","  if (!files) {\n","    return {\n","      response: {\n","        action: 'complete',\n","      }\n","    };\n","  }\n","\n","  for (const file of files) {\n","    const li = document.createElement('li');\n","    li.append(span(file.name, {fontWeight: 'bold'}));\n","    li.append(span(\n","        `(${file.type || 'n/a'}) - ${file.size} bytes, ` +\n","        `last modified: ${\n","            file.lastModifiedDate ? file.lastModifiedDate.toLocaleDateString() :\n","                                    'n/a'} - `));\n","    const percent = span('0% done');\n","    li.appendChild(percent);\n","\n","    outputElement.appendChild(li);\n","\n","    const fileDataPromise = new Promise((resolve) => {\n","      const reader = new FileReader();\n","      reader.onload = (e) => {\n","        resolve(e.target.result);\n","      };\n","      reader.readAsArrayBuffer(file);\n","    });\n","    // Wait for the data to be ready.\n","    let fileData = yield {\n","      promise: fileDataPromise,\n","      response: {\n","        action: 'continue',\n","      }\n","    };\n","\n","    // Use a chunked sending to avoid message size limits. See b/62115660.\n","    let position = 0;\n","    do {\n","      const length = Math.min(fileData.byteLength - position, MAX_PAYLOAD_SIZE);\n","      const chunk = new Uint8Array(fileData, position, length);\n","      position += length;\n","\n","      const base64 = btoa(String.fromCharCode.apply(null, chunk));\n","      yield {\n","        response: {\n","          action: 'append',\n","          file: file.name,\n","          data: base64,\n","        },\n","      };\n","\n","      let percentDone = fileData.byteLength === 0 ?\n","          100 :\n","          Math.round((position / fileData.byteLength) * 100);\n","      percent.textContent = `${percentDone}% done`;\n","\n","    } while (position < fileData.byteLength);\n","  }\n","\n","  // All done.\n","  yield {\n","    response: {\n","      action: 'complete',\n","    }\n","  };\n","}\n","\n","scope.google = scope.google || {};\n","scope.google.colab = scope.google.colab || {};\n","scope.google.colab._files = {\n","  _uploadFiles,\n","  _uploadFilesContinue,\n","};\n","})(self);\n","</script> "]},"metadata":{}},{"output_type":"stream","name":"stdout","text":["Saving texts.txt to texts.txt\n"]}]},{"cell_type":"code","source":["import pandas as pd\n","import re\n","\n","with open(\"texts.txt\", \"r\") as file:\n","    df = file.read()\n","\n","pattern = r'[.!?]\\s'\n","propozitii = re.split(pattern, df)\n","propozitii = [propozitie.strip() for propozitie in propozitii]\n","\n","print(\"Numarul de propozitii din text este: \",len(propozitii))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"TIZz2tvB3I_u","executionInfo":{"status":"ok","timestamp":1711104176383,"user_tz":-120,"elapsed":334,"user":{"displayName":"Dana Rusu","userId":"09652823823802193394"}},"outputId":"eca80edb-0bc4-4f87-d6bf-e319bce158f5"},"execution_count":4,"outputs":[{"output_type":"stream","name":"stdout","text":["Numarul de propozitii din text este:  10\n"]}]},{"cell_type":"code","source":["import pandas as pd\n","import re\n","\n","with open(\"texts.txt\", \"r\") as file:\n","    df = file.read()\n","\n","pattern = r'\\b\\w+\\b'\n","cuvinte = re.findall(pattern, df)\n","\n","print(\"Numarul de cuvinte din text este: \",len(cuvinte))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"TXqylYd57N67","executionInfo":{"status":"ok","timestamp":1711104179462,"user_tz":-120,"elapsed":313,"user":{"displayName":"Dana Rusu","userId":"09652823823802193394"}},"outputId":"ae2af484-4ca4-4adc-b22f-61906df78800"},"execution_count":5,"outputs":[{"output_type":"stream","name":"stdout","text":["Numarul de cuvinte din text este:  156\n"]}]},{"cell_type":"code","source":["import pandas as pd\n","import re\n","\n","with open(\"texts.txt\", \"r\") as file:\n","    df = file.read()\n","\n","pattern = r'\\b\\w+\\b'\n","cuvinte = re.findall(pattern, df)\n","unice=set(cuvinte)\n","\n","print(\"Numarul de cuvinte unice din text este: \",len(unice))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"e2wNUVCT7hpu","executionInfo":{"status":"ok","timestamp":1711104181713,"user_tz":-120,"elapsed":414,"user":{"displayName":"Dana Rusu","userId":"09652823823802193394"}},"outputId":"b8934817-c16f-4f95-aa83-728c3bd51628"},"execution_count":6,"outputs":[{"output_type":"stream","name":"stdout","text":["Numarul de cuvinte unice din text este:  94\n"]}]},{"cell_type":"code","source":["import pandas as pd\n","import re\n","\n","with open(\"texts.txt\", \"r\") as file:\n","    df = file.read()\n","\n","pattern = r'\\b\\w+\\b'\n","cuvinte = re.findall(pattern, df)\n","unice=set(cuvinte)\n","\n","minim=20\n","maxim=2\n","\n","for cuvant in unice:\n","  if len(cuvant)>maxim:\n","    maxim=len(cuvant)\n","    cuvMax=cuvant\n","  elif len(cuvant)<minim:\n","    minim=len(cuvant)\n","    cuvMin=cuvant\n","\n","print(\"Cel mai scurt cuvant este: \", cuvMin, \", iar cel mai lung este: \", cuvMax)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"ztXqKceV8MEv","executionInfo":{"status":"ok","timestamp":1711104194304,"user_tz":-120,"elapsed":352,"user":{"displayName":"Dana Rusu","userId":"09652823823802193394"}},"outputId":"73395f0e-881c-4488-9434-7e1a70545edf"},"execution_count":8,"outputs":[{"output_type":"stream","name":"stdout","text":["Cel mai scurt cuvant este:  3 , iar cel mai lung este:  laboratoarele\n"]}]},{"cell_type":"code","source":["!pip install unidecode"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"wA77XcMi9yZf","executionInfo":{"status":"ok","timestamp":1711104230277,"user_tz":-120,"elapsed":8223,"user":{"displayName":"Dana Rusu","userId":"09652823823802193394"}},"outputId":"37971a8d-bfa0-4bdd-b598-f6de93fc012d"},"execution_count":10,"outputs":[{"output_type":"stream","name":"stdout","text":["Collecting unidecode\n","  Downloading Unidecode-1.3.8-py3-none-any.whl (235 kB)\n","\u001b[?25l     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m0.0/235.5 kB\u001b[0m \u001b[31m?\u001b[0m eta \u001b[36m-:--:--\u001b[0m\r\u001b[2K     \u001b[91m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[91m╸\u001b[0m\u001b[90m━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m122.9/235.5 kB\u001b[0m \u001b[31m3.4 MB/s\u001b[0m eta \u001b[36m0:00:01\u001b[0m\r\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m235.5/235.5 kB\u001b[0m \u001b[31m4.8 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hInstalling collected packages: unidecode\n","Successfully installed unidecode-1.3.8\n"]}]},{"cell_type":"code","source":["import pandas as pd\n","import re\n","from unidecode import unidecode\n","\n","with open(\"texts.txt\", \"r\") as file:\n","    df = file.read()\n","\n","faraD=unidecode(df)\n","print(faraD)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"OO7IoNKS9bl8","executionInfo":{"status":"ok","timestamp":1711104234914,"user_tz":-120,"elapsed":393,"user":{"displayName":"Dana Rusu","userId":"09652823823802193394"}},"outputId":"d5332b65-fa9d-4c75-aad5-05f16e6b4de4"},"execution_count":11,"outputs":[{"output_type":"stream","name":"stdout","text":["Mesaj de informare: \n","Cursul si laboratoarele de Inteligenta Artificiala vor fi o \n","provocare pentru toti. Suntem convinsi ca veti realiza proiecte \n","foarte interesante. Va incurajam sa adresati intrebari atunci \n","cand ceva nu e clar, atat in mod live, cat si folosind platforma \n","Teams, canalul \"general\". \n","Daca ati citit pana aici, va rugam sa lasati un mesaj pe canalul \n","general cu textul \"Am citit textul pentru problema 3\". \n","Mesaj de informare generat de ChatGPT:\n","Stimati cursanti,\n","Suntem incantati sa va avem in echipa noastra pentru Cursul si \n","laboratoarele de Inteligenta Artificiala. Aceasta experienta va \n","fi o adevarata provocare, dar suntem convinsi ca veti realiza \n","proiecte extrem de interesante.\n","Va incurajam sa fiti activi si sa adresati intrebari atunci cand \n","ceva nu este clar. Fie ca este vorba de o discutie in timp real \n","sau prin intermediul platformei Teams, canalul \"general\", suntem \n","aici sa va sprijinim.\n","Succes si sa inceapa aventura AI!\n","Cu consideratie, Echipa de Inteligenta Artificiala\n"]}]},{"cell_type":"code","source":["!pip install stanza"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"oZMMrMQDazwq","executionInfo":{"status":"ok","timestamp":1711104355501,"user_tz":-120,"elapsed":97923,"user":{"displayName":"Dana Rusu","userId":"09652823823802193394"}},"outputId":"1fb584da-eaab-451e-c1ca-054e7cf55fb0"},"execution_count":12,"outputs":[{"output_type":"stream","name":"stdout","text":["Collecting stanza\n","  Downloading stanza-1.8.1-py3-none-any.whl (970 kB)\n","\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m970.4/970.4 kB\u001b[0m \u001b[31m7.6 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hCollecting emoji (from stanza)\n","  Downloading emoji-2.10.1-py2.py3-none-any.whl (421 kB)\n","\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m421.5/421.5 kB\u001b[0m \u001b[31m31.1 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hRequirement already satisfied: numpy in /usr/local/lib/python3.10/dist-packages (from stanza) (1.25.2)\n","Requirement already satisfied: protobuf>=3.15.0 in /usr/local/lib/python3.10/dist-packages (from stanza) (3.20.3)\n","Requirement already satisfied: requests in /usr/local/lib/python3.10/dist-packages (from stanza) (2.31.0)\n","Requirement already satisfied: networkx in /usr/local/lib/python3.10/dist-packages (from stanza) (3.2.1)\n","Requirement already satisfied: toml in /usr/local/lib/python3.10/dist-packages (from stanza) (0.10.2)\n","Requirement already satisfied: torch>=1.3.0 in /usr/local/lib/python3.10/dist-packages (from stanza) (2.2.1+cu121)\n","Requirement already satisfied: tqdm in /usr/local/lib/python3.10/dist-packages (from stanza) (4.66.2)\n","Requirement already satisfied: filelock in /usr/local/lib/python3.10/dist-packages (from torch>=1.3.0->stanza) (3.13.1)\n","Requirement already satisfied: typing-extensions>=4.8.0 in /usr/local/lib/python3.10/dist-packages (from torch>=1.3.0->stanza) (4.10.0)\n","Requirement already satisfied: sympy in /usr/local/lib/python3.10/dist-packages (from torch>=1.3.0->stanza) (1.12)\n","Requirement already satisfied: jinja2 in /usr/local/lib/python3.10/dist-packages (from torch>=1.3.0->stanza) (3.1.3)\n","Requirement already satisfied: fsspec in /usr/local/lib/python3.10/dist-packages (from torch>=1.3.0->stanza) (2023.6.0)\n","Collecting nvidia-cuda-nvrtc-cu12==12.1.105 (from torch>=1.3.0->stanza)\n","  Downloading nvidia_cuda_nvrtc_cu12-12.1.105-py3-none-manylinux1_x86_64.whl (23.7 MB)\n","\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m23.7/23.7 MB\u001b[0m \u001b[31m48.7 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hCollecting nvidia-cuda-runtime-cu12==12.1.105 (from torch>=1.3.0->stanza)\n","  Downloading nvidia_cuda_runtime_cu12-12.1.105-py3-none-manylinux1_x86_64.whl (823 kB)\n","\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m823.6/823.6 kB\u001b[0m \u001b[31m59.6 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hCollecting nvidia-cuda-cupti-cu12==12.1.105 (from torch>=1.3.0->stanza)\n","  Downloading nvidia_cuda_cupti_cu12-12.1.105-py3-none-manylinux1_x86_64.whl (14.1 MB)\n","\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m14.1/14.1 MB\u001b[0m \u001b[31m79.1 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hCollecting nvidia-cudnn-cu12==8.9.2.26 (from torch>=1.3.0->stanza)\n","  Downloading nvidia_cudnn_cu12-8.9.2.26-py3-none-manylinux1_x86_64.whl (731.7 MB)\n","\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m731.7/731.7 MB\u001b[0m \u001b[31m986.3 kB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hCollecting nvidia-cublas-cu12==12.1.3.1 (from torch>=1.3.0->stanza)\n","  Downloading nvidia_cublas_cu12-12.1.3.1-py3-none-manylinux1_x86_64.whl (410.6 MB)\n","\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m410.6/410.6 MB\u001b[0m \u001b[31m3.6 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hCollecting nvidia-cufft-cu12==11.0.2.54 (from torch>=1.3.0->stanza)\n","  Downloading nvidia_cufft_cu12-11.0.2.54-py3-none-manylinux1_x86_64.whl (121.6 MB)\n","\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m121.6/121.6 MB\u001b[0m \u001b[31m8.6 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hCollecting nvidia-curand-cu12==10.3.2.106 (from torch>=1.3.0->stanza)\n","  Downloading nvidia_curand_cu12-10.3.2.106-py3-none-manylinux1_x86_64.whl (56.5 MB)\n","\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m56.5/56.5 MB\u001b[0m \u001b[31m11.4 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hCollecting nvidia-cusolver-cu12==11.4.5.107 (from torch>=1.3.0->stanza)\n","  Downloading nvidia_cusolver_cu12-11.4.5.107-py3-none-manylinux1_x86_64.whl (124.2 MB)\n","\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m124.2/124.2 MB\u001b[0m \u001b[31m8.5 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hCollecting nvidia-cusparse-cu12==12.1.0.106 (from torch>=1.3.0->stanza)\n","  Downloading nvidia_cusparse_cu12-12.1.0.106-py3-none-manylinux1_x86_64.whl (196.0 MB)\n","\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m196.0/196.0 MB\u001b[0m \u001b[31m2.3 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hCollecting nvidia-nccl-cu12==2.19.3 (from torch>=1.3.0->stanza)\n","  Downloading nvidia_nccl_cu12-2.19.3-py3-none-manylinux1_x86_64.whl (166.0 MB)\n","\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m166.0/166.0 MB\u001b[0m \u001b[31m6.2 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hCollecting nvidia-nvtx-cu12==12.1.105 (from torch>=1.3.0->stanza)\n","  Downloading nvidia_nvtx_cu12-12.1.105-py3-none-manylinux1_x86_64.whl (99 kB)\n","\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m99.1/99.1 kB\u001b[0m \u001b[31m13.5 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hRequirement already satisfied: triton==2.2.0 in /usr/local/lib/python3.10/dist-packages (from torch>=1.3.0->stanza) (2.2.0)\n","Collecting nvidia-nvjitlink-cu12 (from nvidia-cusolver-cu12==11.4.5.107->torch>=1.3.0->stanza)\n","  Downloading nvidia_nvjitlink_cu12-12.4.99-py3-none-manylinux2014_x86_64.whl (21.1 MB)\n","\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m21.1/21.1 MB\u001b[0m \u001b[31m58.6 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hRequirement already satisfied: charset-normalizer<4,>=2 in /usr/local/lib/python3.10/dist-packages (from requests->stanza) (3.3.2)\n","Requirement already satisfied: idna<4,>=2.5 in /usr/local/lib/python3.10/dist-packages (from requests->stanza) (3.6)\n","Requirement already satisfied: urllib3<3,>=1.21.1 in /usr/local/lib/python3.10/dist-packages (from requests->stanza) (2.0.7)\n","Requirement already satisfied: certifi>=2017.4.17 in /usr/local/lib/python3.10/dist-packages (from requests->stanza) (2024.2.2)\n","Requirement already satisfied: MarkupSafe>=2.0 in /usr/local/lib/python3.10/dist-packages (from jinja2->torch>=1.3.0->stanza) (2.1.5)\n","Requirement already satisfied: mpmath>=0.19 in /usr/local/lib/python3.10/dist-packages (from sympy->torch>=1.3.0->stanza) (1.3.0)\n","Installing collected packages: nvidia-nvtx-cu12, nvidia-nvjitlink-cu12, nvidia-nccl-cu12, nvidia-curand-cu12, nvidia-cufft-cu12, nvidia-cuda-runtime-cu12, nvidia-cuda-nvrtc-cu12, nvidia-cuda-cupti-cu12, nvidia-cublas-cu12, emoji, nvidia-cusparse-cu12, nvidia-cudnn-cu12, nvidia-cusolver-cu12, stanza\n","Successfully installed emoji-2.10.1 nvidia-cublas-cu12-12.1.3.1 nvidia-cuda-cupti-cu12-12.1.105 nvidia-cuda-nvrtc-cu12-12.1.105 nvidia-cuda-runtime-cu12-12.1.105 nvidia-cudnn-cu12-8.9.2.26 nvidia-cufft-cu12-11.0.2.54 nvidia-curand-cu12-10.3.2.106 nvidia-cusolver-cu12-11.4.5.107 nvidia-cusparse-cu12-12.1.0.106 nvidia-nccl-cu12-2.19.3 nvidia-nvjitlink-cu12-12.4.99 nvidia-nvtx-cu12-12.1.105 stanza-1.8.1\n"]}]},{"cell_type":"code","source":["!pip install rowordnet"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"3geia_ONa2mD","executionInfo":{"status":"ok","timestamp":1711104371781,"user_tz":-120,"elapsed":16293,"user":{"displayName":"Dana Rusu","userId":"09652823823802193394"}},"outputId":"e96b520f-c947-4edb-867b-4563f8b39d2e"},"execution_count":13,"outputs":[{"output_type":"stream","name":"stdout","text":["Collecting rowordnet\n","  Downloading rowordnet-1.1.0-py3-none-any.whl (11.8 MB)\n","\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m11.8/11.8 MB\u001b[0m \u001b[31m16.2 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hRequirement already satisfied: networkx in /usr/local/lib/python3.10/dist-packages (from rowordnet) (3.2.1)\n","Requirement already satisfied: lxml in /usr/local/lib/python3.10/dist-packages (from rowordnet) (4.9.4)\n","Installing collected packages: rowordnet\n","Successfully installed rowordnet-1.1.0\n"]}]},{"cell_type":"code","source":["import pandas as pd\n","import re\n","import rowordnet as rwn\n","\n","with open(\"texts.txt\", \"r\") as file:\n","    df = file.read()\n","\n","pattern = r'\\b\\w+\\b'\n","cuvinte = re.findall(pattern, df)\n","unice=set(cuvinte)\n","\n","maxim=2\n","\n","for cuvant in unice:\n","  if len(cuvant)>maxim:\n","    maxim=len(cuvant)\n","    cuvMax=cuvant\n","\n","wn=rwn.RoWordNet()\n","synset_ids=wn.synsets(literal=\"laborator\")\n","\n","sinonime=[]\n","\n","if synset_ids:\n","  for synset_id in synset_ids:\n","    synset_object=wn.synset(str(synset_id))\n","    sinonime.append(synset_object.literals)\n","\n","print(\"Cuvantul are urmatoarele sinonime:\", sinonime)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"cxNWssHcbChR","executionInfo":{"status":"ok","timestamp":1711113522214,"user_tz":-120,"elapsed":6567,"user":{"displayName":"Dana Rusu","userId":"09652823823802193394"}},"outputId":"b305378a-a2ff-42bf-a12b-ad72579fa24f"},"execution_count":19,"outputs":[{"output_type":"stream","name":"stdout","text":["Cuvantul are urmatoarele sinonime: [['laborator', 'poligon_de_încercare'], ['laborator', 'laborator_de_cercetare', 'laborator_de_științe'], ['laborator', 'laborator_de_cercetare', 'laborator_de_științe'], ['laborator', 'laborator_de_cercetare', 'laborator_de_științe'], ['pahar_de_laborator'], ['laborator_de_fizică'], ['laborator_de_biologie'], ['laborator_de_chimie'], ['masă_de_laborator']]\n"]}]}],"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyMawpE3+OO80ozwd9ERzjRb"},"kernelspec":{"display_name":"Python 3","name":"python3"},"language_info":{"name":"python"}},"nbformat":4,"nbformat_minor":0}